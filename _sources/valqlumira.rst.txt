Copyright
=========

©Visual BI Solutions, Inc. (“Visual BI”). All rights reserved. No part
of this document may be reproduced or transmitted in any form or by any
means, electronic or mechanical, for any purpose, without the express
written permission of Visual BI. Under the law, reproducing includes
translating into another language or format.

As between the parties, Visual BI retains title to, and ownership of,
all proprietary rights with respect to the software contained within its
products. The software is protected by United States copyright laws and
international treaty provision. Therefore, you must treat the software
like any other copyrighted material (e.g. a book or sound recording).

Every effort has been made to ensure that the information in this manual
is accurate. Visual BI Solutions is not responsible for printing or
clerical errors. Information in this document is subject to change
without notice.

Trademark Information
---------------------

Visual BI® and the Visual BI logo design are trademarks of Visual BI. in
the United States and various other countries. All other trademarks are
the property of their respective owners.

Patent Information
------------------

The accompanying product is protected by one or more U.S. and foreign
patents and/or pending patent applications held by Visual BI.

SAP Trademarks
--------------

SAP and other SAP products and services mentioned herein as well as
their respective logos are trademarks or registered trademarks of SAP SE
(or an SAP affiliate company) in Germany and other countries. All other
product and service names mentioned are the trademarks of their
respective companies. Please see
http://www.sap.com/corporate-en/legal/copyright/index.epx#trademark for
additional trademark information and notices.

Definitions
===========

+-----------------------------------+-----------------------------------+
| Design Studio                     | SAP BusinessObjects™ Design       |
|                                   | Studio                            |
+-----------------------------------+-----------------------------------+
| Lumira Designer                   | SAP Lumira Designer               |
+-----------------------------------+-----------------------------------+
| Value Driver Tree Extension (valQ)| Value Driver Trees for Lumira     |
|                                   | Designer and Design Studio        |
+-----------------------------------+-----------------------------------+
| Value Driver Tree                 | Mathematical or conceptual        |
|                                   | business models visualised in a   |
|                                   | way that links the business KPI’s |
|                                   | (what management or stakeholders  |
|                                   | care about) to the operational    |
|                                   | drivers (the things that can be   |
|                                   | influenced to change the KPI’s).  |
+-----------------------------------+-----------------------------------+
| Node                              | A generic reference to a unique   |
|                                   | KPI or Value Driver in a value    |
|                                   | driver tree                       |
+-----------------------------------+-----------------------------------+
| Node Widget                       | The visualization of a KPI or     |
|                                   | Value Driver in a value driver    |
|                                   | tree                              |
+-----------------------------------+-----------------------------------+
| Derived Node                      | Additional Information for a node |
|                                   | but not directly related to the   |
|                                   | calculation hierarchy. This will  |
|                                   | often be key benchmarking KPI’s   |
|                                   | such as cost/production unit.     |
+-----------------------------------+-----------------------------------+
| Parent                            | A reference to the Node one level |
|                                   | above in the Value Driver Tree    |
+-----------------------------------+-----------------------------------+
| Children                          | A reference to the collection of  |
|                                   | nodes immediately below a Node    |
+-----------------------------------+-----------------------------------+

Introduction
============

Document History
----------------

This document is valid for the releases shown in the Table below (see
Table 3.1):

+---------------+---------------+-------+---------------------+
| Major Release | Minor Release | Patch | Date                |
+===============+===============+=======+=====================+
| **2**         | **0**         | **0** | **December 2017\*** |
+---------------+---------------+-------+---------------------+
| 2             | 0             | 5     | July 2018           |
+---------------+---------------+-------+---------------------+
| **3**         | **0**         | **0** | **February 2019\*** |
+---------------+---------------+-------+---------------------+
| **3**         | **1**         | **0** | **April 2019***     |
+---------------+---------------+-------+---------------------+
| **3**         | **2**         | **0** | **September 2019*** |
+---------------+---------------+-------+---------------------+

Table 3.1: Document History

Who should read this guide?
---------------------------

This User Guide for the Visual BI Value Driver Tree for SAP Lumira
Designer (VDT) offered by Visual BI is meant for users that are going to
use Apps leveraging the Value Driver Tree Extension to analyse value
driver relationships, compare versions such as Forecast vs Current
Budget and simulate what-if scenarios such a change in price, volumes
and efficiencies real-time.

What is valQ for SAP Lumira Designer Suite?
-------------------------------------------------

The Visual BI valQ for SAP Lumira Designer suite is
mathematical or conceptual business models visualized in a way that
links the business KPI’s (what management or stakeholders care about) to
the operational drivers (the things that can be influenced to change the
KPI’s).

Traditional Approach
--------------------

Spreadsheet models are often used to support planning and forecasting.
They often contain a high number of parameters. Visualizing, simulating
and sharing models is challenging and the models often become personal
tools only understood by the accountant or engineer who created it.
Integrating data real-time and dynamically in spreadsheets is difficult
resulting in the models that often are static, point-in-time and for a
single period.

.. _ins:

Instructions
============

The Value Driver Tree Extension from valQ provides various components that the
Designer can use in conjunction with standard SAP components or other
extensions. The extension also offers many configuration options
allowing the designer to tailor the final App to suit your specific
needs.

In this guide, we will describe the common end user functionality using
the demo App as an example. It is however important to understand that
your specific implementation may differ.

Once your designer has implemented and configured the value driver tree,
it will be accessed the same way you access your current Design
Studio/Lumira Apps. This would typically be via the BI Launchpad or via
an OpenDoc URL.

When you open a Value Driver Tree App, it will open in a similar manner
at the screenshot below:

.. figure:: _static/4.1.jpg
    :align: center
    :alt: alternate text

    Value Driver Tree

The left panel is the navigation panel, you can hide this panel by
clicking on the top left corner icon |image3|. On the canvas you will
find the value driver tree. By the default the tree is open on collapsed
mode at a level defined by the designer. This is typically completely
collapsed.

Input Data
----------

The Value Driver Tree works with two input data series – the primary and
the comparison data series. A common way of using this is to compare
Forecast vs Budget, Budget vs Last Year Actuals etc. The data series is
at a certain time grain. This would typically be 1 year by 12 months or
a multiyear view like 5 years plan by year.

The selecting of the time series will often be based on Filters or
Variables. A typical scenario is where the designer has defined 4
variables on the underlying data sources:

Primary:

Version: ie. Defaulted to Forecast

Year: ie. Defaulted to Current Year

Comparison:

Version ie. Defaulted to Budget

Year ie. Defaulted to Current Year

This allows the users to compare different versions and years in the
value driver tree model.

The Value Driver Tree can display individual periods but can also apply
time aggregation such as Full Year, Year-to-Date. You can see the
currently selected Value Display aggregation on the Navigation Panel. In
the screenshot above, Full Year is selected. The primary value displayed
on the Widgets is therefore in this instance the Full Year aggregated
data.

Tree Drill Down
---------------

Nodes that has children will have an expand ‘>’ button to the right of
the Widget as highlighted below:

.. figure:: _static/4.2.jpg
    :align: center
    :alt: alternate text
    
    Nodes with children

You can drill down the tree by clicking the expand button.

The tree will focus on the branches that are being expanded. You can
collapse any specific node by clicking the ‘<’ collapse button on the
right of a widget.

Value Driver Trees are in reality networks. The same driver may impact
multiple aspects of the Tree. The component therefore contains a concept
of linked nodes. Such nodes have a link |image5| icon that you can click
which will jump to where the linked node is defined and highlight the
node:

.. figure:: _static/4.3.jpg
    :align: center
    :alt: alternate text
    
    Link

.. figure:: _static/4.4.jpg
    :align: center
    :alt: alternate text
    
    Linked Nodes

To collapse all nodes, click on the collapse icon on the bottom left of
the canvas |image8|

Node level Comments
-------------------

As part of the New Release, comments can be provided for the Scenarios/Initiatives at the Node Level for reference (see Figure below)

.. figure:: _static/ncm1.png 
    :align: center
    :alt: alternate text
    
    Node Level Comments

For our example, Red color has been selected for the Comment and the comment is given as "Alert" (see Figure below).

.. figure:: _static/ncm2.png 
    :align: center
    :alt: alternate text
    
    Node Level Comments

Based on the above configuration, you will be able to view the Node Level Comment as shown below:

.. figure:: _static/ncm3.png 
    :align: center
    :alt: alternate text
    
    Node Level Comments

The comment panel will follow the material design as shown below:

.. figure:: _static/ncm4.png 
    :align: center
    :alt: alternate text
    
    Comment Panel 

The comments will be stored along with API and Bookmarking as part of the scenario (see Figure below).

.. figure:: _static/ncm5.png 
    :align: center
    :alt: alternate text
    
    Comments in the Scenario Panel 


Zoom and Pan
------------

Value Driver Trees can be large. You can zoom and pan the canvas view.
If you are using an iPad or iPhone, you can zoom by pinching and pan by
dragging the same way you would navigate a map.

If you are using a mouse with a scroll wheel, you can point your curser
anywhere in the canvas and scroll the wheel to zoom in and out.

To pan, click and hold the left bottom of the mouse and drag the tree
around.

You can also use the zoom button to zoom if your devise doesn’t support
other options |image9|

Value Display and Simulation Period
-----------------------------------

.. figure:: _static/4.5.jpg
    :align: center
    :alt: alternate text
    
    Value Display

With the ‘Value Display’ functionality you can choose the time
aggregation you want to display as the primary value. The designer can
link certain nodes to a user selected scaling. You can select the scale
you wish to display by selecting this under the Value Display section.
Note that the options here can be configured so they may differ. It is
important to note that not all notes are scaled using this as the value
driver tree typically contains both amounts, prices, rates and physical
volumes.

In addition to the primary display value, the designer can also choose a
secondary value to be displayed. I.e. if you are showing Full Year as
primary, in the below example, it has been configured to visualize the
Month data as secondary:

.. figure:: _static/4.6.jpg
    :align: center
    :alt: alternate text
    
    Value Display

The time aggregation and display relates to the Simulation Period
selected.

When **Month** is selected, it shows the first month of the simulation
interval selected. By default, the simulation period is the selected
period and the future. This is an important concept as when we simulate,
we generally don’t want to apply a change to the past as we can’t change
it. It is possible to also set the ‘to’ period in a simulation, just
click |image12| and highlight the month you want as the end period of a
simulation. This is however a special scenario.

.. figure:: _static/4.7.jpg
    :align: center
    :alt: alternate text
    
    Simulation Period

**YTD** – the selected period -1 is the year to date data (eg. selected
simulation period is September to December, the YTD data will be from
Jan to August).

Note: Simulation of future periods will not impact the YTD data.

.. figure:: _static/4.8.jpg
    :align: center
    :alt: alternate text
    
    Value Display and Simulation Period

**Full Year** – Shows the full year cumulated data

.. figure:: _static/4.9.jpg
    :align: center
    :alt: alternate text
    
    Value Display and Simulation Period

**Sim. Period** – to simulate a specific period, for example a 3 month
rolling forecast from September to November, click the first month
September then click |image16|\ and click the last month November for
simulation. You can then choose to only show the values aggregated for  
the selected simulation periods

.. figure:: _static/4.10.jpg
    :align: center
    :alt: alternate text
    
    Value Display and Simulation Period

Value Driver Tree views - Filters
---------------------------------

If your Value Driver Tree is large, the designer may have defined
specific sub views. These would be listed under the Value Driver Trees
Section of the Navigation Panel. When clicking on of these views, the
tree will be filtered and the specific node will be made the top node.
Calculation dependencies are still respected but this significantly
improves the navigation as it focuses the tree on a specific area.

In this example, the options defined are:

-  Open all company level: Net Profit

-  Open per department: Mining, Processing or the operational tree for
   Mill Throughput

.. figure:: _static/4.11.jpg
    :align: center
    :alt: alternate text
    
    Value Driver Tree - Filters

KPIs
----

The Navigation Panel can be configured to list a set of KPI’s from the
value driver tree. You are able to navigate to each of them for a fast
view on the simulation impact on a given KPI. Click on the KPI to
navigate to the node.

.. figure:: _static/4.12.jpg
    :align: center
    :alt: alternate text
    
    KPIs

Data Simulation
---------------

There are 2 options to simulate:

-  Hover over a desired node to simulate, slide the scaling button to
   right for positive impact or left for negative impact. The simulation
   will be showed on the right hand side. A window will open displaying
   the changes. The pencil icon will display the change in percentage
   that has been made: |image20|, and a legend with percentage showing
   if the adjust has made the scenario better or worse |image21|.

.. figure:: _static/4.13.jpg
    :align: center
    :alt: alternate text
    
    Data Simulation

-  Click on the arrow icon of the node |image23| then click ‘Edit Key
   Input’ |image24| and manually edit the changes in simulation per
   period. Click X to close manual input table.

Notes

-  You can update the periods highlighted in YELLOW based on the
   selected simulation period.

.. figure:: _static/4.14.jpg
    :align: center
    :alt: alternate text
    
    Simulation Periods

The edit icon will indicate the months that have been edited

.. figure:: _static/4.15.jpg
    :align: center
    :alt: alternate text
    
    Simulation Periods

-  You can update the ‘Variation’ column which will overwrite the
   numbers in the selected simulation periods. Any manual updates in
   period will not be overwritten by the ‘Variation’ column. In the
   example below, in blue are the months which were manually edited and
   in orange are highlighted the variation and in this case the month to
   which the variation was applied.

.. figure:: _static/4.16.jpg
    :align: center
    :alt: alternate text
    
    Simulation Periods

Click reset icon to return to the original data |image28|.

Key Inputs 
-----------

Key Inputs is available on the left side panel to directly simulate key
cost drivers without going into the node details.

Click the ‘Edit Key Input’ icon |image29| and manually edit the changes
in simulation per periods.

.. figure:: _static/4.17.jpg
    :align: center
    :alt: alternate text
    
    Key Inputs

Notes:

-  Can update the periods highlighted in YELLOW based on the selected
   simulation period. All the changes in the Key Assumptions are
   highlighted in the left side panel side.

.. figure:: _static/4.18.jpg
    :align: center
    :alt: alternate text
    
    Simulation Periods

Click X to close manual input table.

-  Click a Key Assumption or Key Performance Indicator and it will
   highlight the source nodes to further check the details.

.. figure:: _static/4.19.jpg
    :align: center
    :alt: alternate text
    
    Key Inputs

All simulations are highlighted in the upper right corner.

|image33|

Click |image34| to return to the original selected version without any
simulation.

When more number of simulations are done, you will be able to view the More button in the upper right corner. By clicking the More button, you will be able to see the remaining simulations as shown in the below Figure.

.. figure:: _static/msm.png 
    :align: center
    :alt: alternate text
    
    Simulations - More option button

Scenario Comparison
-------------------

You can create multiple scenarios in parallel, compare them as well as
sharing the collection with others.

This is how you do it.

-  Update the default scenario 1.

-  Click ‘Create new Scenario’ icon |image35|. This copies the active
   scenario.

.. figure:: _static/4.20.jpg
    :align: center
    :alt: alternate text
    
    Scenarios

Notes:

-  The copied scenario is the replicate of the last scenario (e.g.
   Scenario 2 will have the same data from the copied Scenario 1.

-  We have the option to make additional simulation in the new scenario
   or click to |image37| return to the original selected version without
   any simulation and then make a new simulation.

-  Click ‘Compare Scenario’ icon |image38| to generate a report
   comparison format with the key Assumptions and KPI’s.

-  Comparison report compares all scenarios that have been created in
   the active collection. It also shows the Simulated Data Scenario
   (Baseline: Full Year), Comparison Version (Full Year) and Simulated
   Data Scenario Year to Date (Baseline: YTD).

-  Highlighted in GREEN fonts the most favorable results and in RED
   fonts the least favorable result in the scenario comparison report.

Click |image39| located in the lower left corner to extract the report
in excel format.

.. figure:: _static/4.21.jpg
    :align: center
    :alt: alternate text
    
    Full Year Scenario Comparison

.. figure:: _static/4.22.jpg
    :align: center
    :alt: alternate text
    
    Full Year Scenario Comparison

Switch to Node details from compare scenarios
---------------------------------------------

As part of the New Release, you can switch down to any Node details from the compared scenarios and 
it would get displayed in the Comparison Page. For our example, there are 3 different scenarios in which the Nodes 
have been simulated under each scenario (see Figure below).

.. figure:: _static/snd1.png
    :align: center
    :alt: alternate text

    Three Scenarios in Navigation Panel

After clicking the Compare Scenarios option as shown in the above Figure, you will be able to view the
Comparison Page as shown below. 

.. figure:: _static/snd2.png
    :align: center
    :alt: alternate text

    Three Scenarios in Detail Page

Now click the Arrow icon against the Node Net Profit as shown in the above Figure. 
After clicking the Arrow icon, you will be able to view the Net Profit Node details in the Detail page (see
Figure below). You can also click the Number at the top of the scenario 1 window (see Figure above) 
and you will be able to view the Net Profit Node details as part of our example.

.. figure:: _static/snd3.png
    :align: center
    :alt: alternate text

    Net Profit Node details in Detail page 

Similarly you can view the details for other Nodes.

Initiatives in Scenario
-----------------------

As part of the New Release, each Scenario can have multiple number of Initiatives. Navigate to the Navigation panel and click “+” to add the Initiative in Scenario 1 (see Figure below).

.. figure:: _static/ini1.png
    :align: center
    :alt: alternate text

    Adding Initiatives in Scenario 

In our example, two Initiatives “Initiative 1” and “Initiative 2” have been added to the Scenario 1. For Initiative 1, the simulation has been done for both the Nodes Revenue and Total Cost as shown in the below Figure.

.. figure:: _static/ini2.png
    :align: center
    :alt: alternate text 

    Initiative 1 of Scenario 1

Now navigate to the Initiative 2 of Scenario 1. You can observe that the Nodes Revenue and Total Cost show “1” which indicates that both the Nodes are simulated once for one number of Initiative (see Figure below).

.. figure:: _static/ini3.png
    :align: center
    :alt: alternate text
 
    Initiative 2 of Scenario 1

For our example, now simulate the Node Revenue as shown in the below Figure.

.. figure:: _static/ini4.png
    :align: center
    :alt: alternate text 

    Two Initiatives for Node Revenue

From the above Figure, you can observe that there are two number of Initiatives created for the Node Revenue. It is to be noted that any number of Initiatives can be moved from one Scenario to another Scenario by a simple drag and drop function. 
Also you will be able to copy any number of Scenarios having any number of Initiatives.

Aggregate value based on Simulation Impacts
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In another example, the Node Revenue in Scenario 1 has the value 416.4 (see Figure below).

.. figure:: _static/ini4str.png
    :align: center
    :alt: alternate text 

    Three Initiatives for Node Revenue

Create three Initiatives under Scenario 1 and simulate the Node Revenue in all the three Initiatives 
to different simulation values.

.. figure:: _static/ini4a.png
    :align: center
    :alt: alternate text 

    Three Initiatives for Node Revenue 

Now the Total aggregated value for the Node Revenue in Scenario 1 will be calculated as the sum of the Actual 
value of the Node Revenue with the Simulation impact values of all the three Initiatives. 
These Simulation Impact values can be viewed in the respective Node's Detail Page (see Figure below)

.. figure:: _static/ini4b.png
    :align: center
    :alt: alternate text 

    Simulation Impact Values for Three Initiatives in Node Revenue 

Now the Total Aggregated value for the Node Revenue in Scenario 1 will be 416.4 + (179.0 + 249.8 + 279) = 416.4 + 707.8 = 1124.2 (see Figure below).

.. figure:: _static/ini4c.png
    :align: center
    :alt: alternate text 

    Total Aggregated value for the Node Revenue  

Initiatives in compare scenarios
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

By clicking the option "Compare Scenarios in collection" in the Navigation Panel, you will be also able to view the Initiatives in Full Year Scenario Comparison page that are part of the specific Scenario (see Figure below).

.. figure:: _static/ini5.png
    :align: center
    :alt: alternate text 

    Initiatives view in Full Year Scenario Comparison page 

Initiatives in Waterfall Chart
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You will be able to view the Initiatives Breakdown in the Waterfall Chart which exists in the Detail Page. 
The Initiatives Breakdown will be visible only when the Scenario is in active status and also the specific 
Initiatives should be selected. As an example, the below Figure shows the Initiatives Breakdown for the three 
different Initiatives.

.. figure:: _static/iniwc.png
    :align: center
    :alt: alternate text 

    Initiatives Breakdown in Detail Page

Selection  of specific Initiative
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You will be able to select the required Initiative by clicking the respective check box
against the Initiative (see Figure below). The check boxes will be visible only when you click the Scenario Panel 
as shown in the below Figure.

.. figure:: _static/ini6.png
    :align: center
    :alt: alternate text 

    Selecting the Initiatives

In the above example, the Initiative 1 and Initiative 3 have been selected. 

Scenario Export with second level Initiatives
---------------------------------------------

As part of the New Release, you will be able to export the scenario with second level Initiatives. 
For our example, Scenario 1 has two Initiatives, Initiative 1 and Initiative 2 (see Figure below).

.. figure:: _static/ind1.png
    :align: center
    :alt: alternate text 

    Scenario with 2 Initiatives

After clicking the Download Scenario option as shown in the above Figure, the xml file will be downloaded 
based on the configuration (see Figure below). 

.. figure:: _static/ind2.png 
    :align: center
    :width: 1000
    :alt: alternate text 

    Downloaded xml file

From the above Figure, you can observe that the downloaded xml file has one Scenario followed by 
Initiative 1 and then Inititaive 2.

Scenario Data in output data source
-----------------------------------

Now you will be able to export the Scenario data in the output data source.
For our example, the layout that we create in Lumira Designer will be looking similar to the 
Figure shown below:

.. figure:: _static/scds1.png 
    :align: center
    :alt: alternate text 

    VDT Output dataSource

From the above layout, you can observe that the VDT output data source has been assigned as a Data Source and it has been mapped to the 
Advanced Table. As an end result, you will be able to view the output data source for the scenarios simulation in the Advanced Table
(see the Figures below).

.. figure:: _static/scds2.png 
    :align: center
    :alt: alternate text 

    Scenario 1 data before simulation

.. figure:: _static/scds3.png 
    :align: center
    :alt: alternate text 

    Scenario 1 data after simulation 


Constraints
-----------

Constraints are also available in the left side panel that identifies
the metrics that are overcapacity (highlighted in RED fonts) or still
have opportunities for further improvements (WHITE fonts).

Notes:

-  RED fonts means over capacity as compared to the maximum limit. (e.g.
   Production Rate 1.691 tonnes per hour is over capacity as compared to
   the maximum limit of 1.600 tonnes per hour).

-  WHITE fonts means still have opportunities for improvement as
   compared to the maximum limit.

.. figure:: _static/4.23.jpg
    :align: center
    :alt: alternate text
    
    Constraints

.. figure:: _static/4.24.jpg
    :align: center
    :alt: alternate text
    
    Constraints

Collaboration API
-----------------

The Collaboration API details are given below:

Backend Code: 

https://github.com/visualbis/valqio contains sample backend server implementation using Python.

Demo Server:

http://valqio.herokuapp.com/ is being hosted with server for testing purpose.


IBCS Chart in Trend Analysis
----------------------------

IBCS Chart has been added as a new Chart type for the Node details (see Figures below).

.. figure:: _static/ibcs1.png 
    :align: center
    :alt: alternate text
    
    IBCS Chart 


.. figure:: _static/ibcs2.png 
    :align: center
    :alt: alternate text
    
    IBCS Chart in Trend 

Data merge property
-------------------

The Data Merge component has been added in VDT for Append operations and the VBX Data Merge 
component can be also used for advanced operations. The similar layout is shown below:

.. figure:: _static/dmp.png 
    :align: center
    :alt: alternate text
    
    Data Merge component in VDT  


Understanding Variances
=======================

The starting point for a simulation is a selection of two versions -
**Primary Version** and a **Comparison Version** and a year. For
instance a forecast vs current budget.

Once we start simulating, changes are applied to the primary version. We
call this changing version the Simulation.

To understand the improvements we achieve, we also keep track of the
original values from the primary version without simulation changes. We
therefore have 3 data series in the model that we calculate and compare:

1. Simulation (The Primary Version including applied variations)

2. Original (The Primary Version without variations)

3. Target (The Comparison Version)

Based on the above, we calculate the following variances:

-  Simulated Variance (Simulation vs Target)

Q: If we changed these things, would we hit target?

-  Simulation Impact (Simulation vs Original)

Q: How much would we improve if we made these changes?

-  Original Variance (Original vs. Target)

Q: What was our variance if we did nothing?

Understanding the Node Widget Information
=========================================

The Node Widget for a Value Driver displays key information such as
value, variance, simulation impacts and trend without having to navigate
further.

.. figure:: _static/6.1.jpg    
    :align: center
    :alt: alternate text

    Node Widget Information

Conducting what-if analysis
===========================

One of the main aspects of the Value Driver Tree is to be able to
simulate the impacts changes to key drivers such as prices have on the
full year forecast. As we can’t change the past, such a simulated change
should only be applied to future period. The App have this capability.
When performing what-if analysis, the period that a simulation should be
applied from is selected in the Side Panel (current period is default):

.. figure:: _static/7.1.jpg
    :align: center
    :alt: alternate text
    
    What-if-Analysis

Assuming that we calculate fuel cost based on litre per month and price
as $/l and we are at the end of period 9, the simulated cost should be
calculated first at the monthly level with the % change applied to
period 9 and onwards. Once the individual months are calculated, they
can then be aggregated based on the rule of the node (sum for diesel
cost, weighted average for diesel price):

.. figure:: _static/formula.png
    :align: center
    :alt: alternate text
    
    Formula

When hovering over a node, the bottom half of the node becomes a slider.
Drag the slider left to vary the node by a negatively, drag right for
positive. As you drag, the values for the selected node is dynamically
recalculated and displayed. When releasing, the tree will immediately
recalculate all dependent nodes and show the result.

.. figure:: _static/7.2.jpg
    :align: center
    :alt: alternate text
    
    Simulation

A simulation change is either a pct. Change, a fixed future price or a
pct. Growth depending on the simulation model defined for the value
driver.

The default method for the driver can be seen on the simulation tooltip.
You can also change the selected model by selecting at the bottom of the
tooltip.

.. figure:: _static/7.3.jpg
    :align: center
    :alt: alternate text
    
    Simulation Tooltip

Understanding that a change is applied to the selected periods only is
particularly important to understand when displaying the Full Year value
and the node is using a weighted average. The displayed value is the
weighted average value for the full year, not the value for future
periods.

A simplified example will help understanding this critical concept.
Let’s assume that the diesel price is $1.014 for all periods and the
monthly fuel consumption is constant as well at 1m litres and we have
selected period 9 as we want to apply the simulation to the remaining
periods of the year.

We now drag the slider for the fuel price to the right and the node will
show the new weighted average value. Let’s say we drag it to the right
so the full year weighted average is $1.030. As the first 8 periods were
$1.014, the weighted average of $1.030 means that the simulated price
change is equivalent of a future fuel price of $1.20. To better
understand the individual future period simulations when looking a Full
Year aggregated number, it is useful to pay attention to the Month Data
also shown on the node. The real world is a little more complex as the
price is not necessarily the same every month and the fuel consumed is
unlikely to be constant as well. Below is an example of such a
simulation based on a real data set:

.. figure:: _static/7.4.jpg
    :align: center
    :alt: alternate text
    
    Simulation

The weighted average price was 1.014. We now simulated a 2% increase in
the prices selected and future periods which equates to a new weighted
average price of 1.030. If you look at the month Value, you can see for
the selected month, this equates to the higher price of 1.195.

Multiple variations can be applied in parallel as they are expressed as
pct. The top left % indicate the cumulative impact on this particular
node of all simulation that impacts it.

Any node with a variation will have the blue pen icon in the top middle
showing the percentage the node has been varied with. For quick what-if
analysis at any level and a dynamic work process from the general to the
specific, you can apply a simulation on any level.

Certain nodes may have been locked from changes in the model. This is
generally when there is a specific reason not to vary this node directly
for consistency purposes. A locked node will not have the grey pen icon
|image49|\ or a slider when hovering.

Certain nodes may be displayed multiple times in the tree. An example is
Material Moved as it affects Mining and Mill Throughput. In these
scenarios, one node is linked to the other. If you simulate a change in
a linked node, the node it is pointing to is instead changed so it
applies both to the selected node and anywhere else where the driver is
used. If a node is a linked node, it has the Linked node text in the
bottom right corner:

.. figure:: _static/7.5.jpg
    :align: center
    :alt: alternate text
    
    Simulation

Getting more information about a Value driver
=============================================

If you click on a node Widget, a detail screen is displayed with
additional information on the selected node.

.. figure:: _static/8.1.png
    :align: center
    :alt: alternate text
    
    Information on Value Driver

For some nodes, the designer may have added a description beyond the
title. If so, this will be displayed below the title.

If a node is calculated, a simplified version of the formula is
displayed. This is the technical formula that is used to calculate
individual period values. To calculate the real values, all simulation
variations that affects the node are applied to selected and future
periods and the aggregation rules for the node is applied (sum or
weighted average).

The trend chart compares the simulated value to the comparison version
as well as showing the original value as the dotted line on the bar if
simulation variations are active. If you hover over the bar, you will
the see the details for the period.

The table on the top right shows the period and full year values and the
variance calculations as per the definition previously in this document.

The App also analyses all the active simulations to see if any impacts
this particular node. If so, it then analyses how much each of the
active simulation changes contributes to the overall impact on this node
and generates a waterfall diagram with the break down which is displayed
in the bottom right panel.

In some scenarios, you may vary multiple factors impacting the same node
in a compound nature. I.e. you vary both sales volume and sales price
and want to know the impact on revenue. As the sum of both changes is
more than the impact of each individually, the waterfall chart breaks
down each of the individual impacts and a compound impact bar.

As part of the New Release, you will be able to change the waterfall chart type in the runtime using
the icon as shown in the below Figure.


.. figure:: _static/icn1.png
    :align: center
    :alt: alternate text
    
    Flip Chart to Vertical/Horizontal Waterfall Chart 

For our example the Horizontal Waterfall Chart is flipped to Vertical Waterfall Chart (see Figure below).

.. figure:: _static/icn2.png
    :align: center
    :alt: alternate text
    
    Vertical Waterfall Chart  


You will be able to view the Waterfall Chart in full screen by using the icon as shown in the below Figure.

.. figure:: _static/icn3.png
    :align: center
    :alt: alternate text
    
    Full screen of the Waterfall Chart  

The Full screen image of the Waterfall Chart is shown below. 

.. figure:: _static/icn4.png
    :align: center
    :alt: alternate text
    
    Full screen image of the Waterfall Chart 

**Note:**
When the number of groups is more than 8 counts then it will be categorised and the Variance Breakdown 
in the waterfall chart will get displayed as shown below.

.. figure:: _static/icn5.png
    :align: center
    :alt: alternate text
    
    Waterfall Chart - Variance Breakdown based on Grouping    


.. _sos:

Saving and Opening Scenarios 
=============================

The standard Value Driver Tree App template contains functionality for
saving and opening a scenario collection.

You can save a simulation for later reference by using the save button
in the bottom right corner of the Side Panel:

.. figure:: _static/9.1.jpg
    :align: center
    :alt: alternate text
    
    Manage Simulations

When clicking the button, you will be asked to provide a unique name.

.. figure:: _static/9.2.jpg
    :align: center
    :width: 300
    :alt: alternate text
    
    Unique Scenario Name

If you choose a name that already exists, you can will be prompted to
either overwrite the existing scenario or choose a different name.

You can open existing scenarios by clicking the open button.

.. figure:: _static/9.3.jpg
    :align: center
    :width: 300
    :alt: alternate text
    
    Unique Scenario Name

You are also able to delete existing scenario from there.

There is also an option to export the value driver tree data set to
Excel. It will create an unformatted spreadsheet with the tree and all
the node data.

Creating a Value Driver Tree
=============================

The steps below explains you on how to create a Value Driver Tree in SAP
Lumira Designer using VBX Value Driver Tree Components.

1. In SAP Lumira Designer, navigate to the Outline panel as shown in the
   below Figure.

.. figure:: _static/10.1.png
    :align: center
    :alt: alternate text
    
    Outline Panel

2. Now navigate to the Layout **•** Create **•** Value Driver Tree
   Components **•** Core Value Driver Tree (see Figure below).

.. figure:: _static/10.2.png
    :align: center
    :alt: alternate text
    
    Selecting Core Value Driver Tree

3. Now navigate to the Additional properties of the Value Driver Tree.
   It has four different Tabs namely Tree, Settings, Data and About (see
   Figure below).

.. figure:: _static/10.3.png
    :align: center
    :alt: alternate text
    
    Additional Properties Sheet for Value Driver Tree

As part of the New Release, the look and feel of the Additional Properties Sheet for the Tree, Settings and the Data Tabs 
have been changed and the below Figures represent the new screens.

.. figure:: _static/treetabchanged.png
    :align: center
    :alt: alternate text
    
    Additional Properties Sheet for Tree Tab

.. figure:: _static/settingstabchanged.png 
    :align: center
    :alt: alternate text
    
    Additional Properties Sheet for Settings Tab 

.. figure:: _static/datatabchanged.png
    :align: center
    :alt: alternate text
    
    Additional Properties Sheet for Data Tab

Tree Tab
--------

By navigating to the Tree Tab, you will be able to view two different
panels one is the Left Panel and the other is the Right Panel. In the
Left Panel you will be able to create the Parent Node and the Child
Nodes. In the Right Panel, you will be able to configure the properties
for the created Parent Node and the Child Nodes.

Tree Tab – Left Panel
~~~~~~~~~~~~~~~~~~~~~

The steps below explains on how to create a Parent Node and Child Nodes
in the Left Panel of the Tree Tab.

1. For our example, navigate to the left panel of the Tree Tab and you
   will find 4 different options as shown in the below Figure.

.. figure:: _static/10.4.png
    :align: center
    :alt: alternate text
    
    Tree Tab in Additional Properties

    
2. Click the option “Create New” and you will now observe that Node
   Structures will appear in the left panel and the properties to be
   configured for the Node will appear in the right panel (see Figure
   below).

.. figure:: _static/10.5.png
    :align: center
    :alt: alternate text
    
    Node Configuration

3. In the above Figure you can observe that there is one Parent Node by
   default. Similarly you will be able to create multiple Child Nodes
   under the Parent Node. Click the “+” button near the Parent Node in
   order to create a Child Node. (see Figure below).

.. figure:: _static/10.6.png
    :align: center
    :alt: alternate text
    
    Creating a Child Node

4. You can delete the Parent Node and Child Nodes by clicking the Delete
   button as shown in the below Figure.

.. figure:: _static/10.7.png
    :align: center
    :alt: alternate text
    
    Deleting a Parent Node/Child Nodes

5. For our example we have created Node Structure in the left panel as
   shown in the below Figure.

.. figure:: _static/10.8.png
    :align: center
    :alt: alternate text
    
    A Parent Node having different Child Nodes

6. Now click the “<<” button for the Node “1:Copy of Node Title” as
   shown in the below Figure.

.. figure:: _static/10.9.png
    :align: center
    :alt: alternate text
    
    Select << button

7. Now you can observe that the Node “1:Copy of Node Title” is moved to
   the left position hence making a Node Sibling of the Parent Node
   “TOP:Node Title” (see Figure below).

.. figure:: _static/10.10.png
    :align: center
    :alt: alternate text
    
    Creating a Node Sibling of the Parent Node

8. Now click the “>>” button for the Node “1:Copy of Node Title” as
   shown in the below Figure.

.. figure:: _static/10.11.png
    :align: center
    :alt: alternate text
    
    Select >> button

9. Now you can observe that the Node “1:Copy of Node Title” is moved to
   the right position hence making a Node a Child of previous Sibling
   “TOP:Node Title” (see Figure below).

.. figure:: _static/10.12.png
    :align: center
    :alt: alternate text
     
    Creating a Node Child of Previous Node

Similarly you will be able to create the Tree with Nodes using the other 3 options namely 

-  Create New from Sample Data - Create a Tree from sample data.
-  Dynamic based on data source rows - Create a Tree dynamically based on the Data Source.
-  Import (Expert Function) - Create a tree using the nodes json array.

As part of the New Release, there is another option namely Import Samples from online. Using this option, you will 
be able to create a Tree from the predefined set of samples from online (see Figure below).

.. figure:: _static/iso1.png
    :align: center
    :alt: alternate text
    
    Creating a Tree using Import Samples from online option

From the above settings, you can observe that the Mining Industry has been selected and the default Node settings for the selected option is displayed
as shown in the below Figure.

.. figure:: _static/iso2.png
    :align: center
    :alt: alternate text
    
    Node Settings for Import Samples from online option

Also as part of the New Release, you have the option to view the Additional Properties Sheet in German Language. The user can switch to English as well as German Languages based on their choice (see Figure below).

.. figure:: _static/German.png
    :align: center
    :alt: alternate text
     
    German Language Support 

Tree Tab – Right Panel
~~~~~~~~~~~~~~~~~~~~~~

In the Right Panel of the Tree Tab, you will be able to configure the
properties for the Parent Node and the Child Nodes.

For our example, the steps below explains on how to configure the
properties for the Nodes:

1. Now navigate to the right panel where you can view the properties to
   be configured for the Parent Node.

2. In the area TOP: Node Title, set the property Unique Id to the label
   TOP.

3. Enter the Title as “Savings” (see Figure below).

.. figure:: _static/10.13.png
    :align: center
    :alt: alternate text
    
    Node Properties

4.  In the area Calculation, set the Calc. Method to the option Subtract
    Children (a-b-c…..) as shown in the above Figure .

5.  Set the property Time Aggregation to the option Sum of Periods.

6.  Set the property Desired Trend to the option Increase.

7.  In the area Display, set the property Visual Style to the option
    Normal (see Figure above).

8.  Set the property Scaling to the option User Selected.

9.  For the property Value Display, set the sub property Prefix to the
    value “$”and set the sub property Decimals to the option “0”.

10. For the property Features, activate the options Status Color and
    Details on Click.

11. Set the property Detail Page Type to the option Default.

12. In the area Simulation, set the property Default Method to the
    option “% Change applied to baseline in future periods” (see Figure
    above).

13. Set the property Link Simulation to the option none.

14. In the area Business Definition, set the values for the properties
    Description, Header, Footer and Technical Nodes based on your
    choice.

.. figure:: _static/10.14.png
    :align: center
    :alt: alternate text
    
    Node Properties

15. Based on the above configurations done in the Right Panel, the
    Parent Node in the Left Panel appears as shown in the below Figure.

.. figure:: _static/10.15.png
    :align: center
    :alt: alternate text
    
    Tree with Parent Node

16. Similarly as part of our example, several Child Nodes have been
    created under the Parent Node with different configurations (see
    Figure below) and further each Node can be expanded by clicking the
    “>” button.

.. figure:: _static/10.16.png
    :align: center
    :alt: alternate text
    
    Tree created with different Child Nodes

Templated Nodes
---------------

As part of valQ Release 3.0, navigate to the Tab Tree in the Additional
Properties of the VDT. You need to select the particular Node and add a
Node under the selected Node for creating the Templated Node. Also you
can create a Templated Node for the already existing Node. It is very
specific that the Templated Nodes should not map the Parent Node.

The steps below explains on how you will be able to create the Templated
Nodes:

1. For our example, after navigating to the Tab Tree, select the Node
   **Expenses** and click “+” to add a Node **Copy of Expenses** under
   the Node **Expenses** (see Figure below).

.. figure:: _static/10.17.png
    :align: center
    :alt: alternate text
    
    Tab Tree

2. For our example, enter the Title for the Node **Copy of Expenses** as
   Expenses 2 (see Figure below).

.. figure:: _static/10.18.png
    :align: center
    :alt: alternate text
    
    Tab Tree

3. In the area Calculation, set the property Calc. Method to the option
   Template based on the other Node.

4. Set the property Node to use as Template to the option 13: Living
   Expenses where all its child Nodes will get added into the Node
   Expenses 2.

5. Enter the details for the properties Template Child Node Prefixes and
   Title Prefix when outside Tree based on your choice.

6. Based on the above configuration, you will be able to view the
   Templated Node Expenses 2 having all its Nodes similar to the Living
   Expenses Node as per our example.

.. figure:: _static/10.19.png
    :align: center
    :alt: alternate text
    
    Templated Node at Runtime

Template Child Node Prefixes

Nodes within the templated node structure will get the technical name of
the node inside the referenced template with the prefix + 2 underscore.
i.e. Prefix '1000', template node: 'A'. templated node id '1000__A'. All
formulas referencing nodes inside the templated structure will be
adjusted to include the prefix. Any references outside the structure
will remain the same. If template is used for multiple nodes, the titles
are no longer unique when displayed outside the node structure. Use the
Title prefix to make it unique.

Enable Fixed Value List (Enum option)
-------------------------------------

As part of valQ Release 3.0, navigate to the Tab Tree in the Additional
Properties of the VDT. Here you will have the option to use Enum option
which contains a set of named constants and those named constants can be
represented in the Node.

The steps below explains on how you will be able to use Enum option in
VDT:

1. For our example, after navigating to the Tab Tree, select the Node
   **Income** and click “+” to add a Node **Copy of Income** under the
   Node **Income** as shown in the below Figure.

.. figure:: _static/10.20.png
    :align: center
    :alt: alternate text
    
    Tab Tree

2. Now click the Node **Copy of Income.** Enter the Title of the Node as
   “Enum” (see Figure below).

.. figure:: _static/10.21.png
    :align: center
    :alt: alternate text
    
    Primary and Comparison Data

3. For our example, set the property Calc. Method to the option Manual
   (see Figure above).

4. Set the values for the Primary Data as
   [-700,-700,-700,500,500,500,500,500,500,500,500,500]. In our example,
   we have set the Simulation Period as 12 months and we do have 12
   values for the Primary Data.

5. Set the vales for the Comparison Data as
   [10,10,10,10,10,0,0,0,0,0,0,0]. In this case too we have 12 values
   for the Comparison Data.

6. Now activate the property Enable Fixed Value List.

7. Set the Label for the values as shown in the below table. It is to be
   noted that the labels should be only assigned to both Primary and
   Comparison Data values.

+-------+--------------------+
| Label | Value (ony Number) |
+=======+====================+
| A     | 10                 |
+-------+--------------------+
| B     | -700               |
+-------+--------------------+
| C     | 500                |
+-------+--------------------+
| D     | 0                  |
+-------+--------------------+

*Label and their assigned values*

8. Now based on the above configuration you will able to view the Tree
   in the Runtime as shown below.

.. figure:: _static/10.23.png
    :align: center
    :alt: alternate text
    
    Label values in Runtime

9. From the above Figure you can observe that the primary data value
   -700 occurs thrice and it is labelled as 3 x B and the data value 500
   occurs nine times and it is denoted as 9 X C. You can also select the
   specific labels from the drop down at the Node Level (see Figure
   below).

.. figure:: _static/10.24.png
    :align: center
    :alt: alternate text
    
    Select Labels from the Node

10. You can edit the Label values for the simulation period of 12 months
    using the options namely Constant and Manual. For editing the Label
    values in Constant option, click the icon as shown in the below
    Figure.

.. figure:: _static/10.25.png
    :align: center
    :alt: alternate text
    
    Edit Label values using Constant option

11. When the icon is clicked, it leads to the pop up window as shown
    below. Now select the Constant Value option from the drop down as
    shown in the below Figure.

.. figure:: _static/10.26.png
    :align: center
    :alt: alternate text
    
    Pop Window with Constant Value option selected for Edit

12. Now click the Edit option as shown in the above Figure which will
    lead you to the Table Visualization page (see Figure below).

.. figure:: _static/10.27.png
    :align: center
    :alt: alternate text
    
    Table Visuals with Constant option

13. Here the constant value is selected as “B” and you can observe that
    all the Label values for the 12 months have been changed to the
    Label “B”.

14. For editing the Label values in Manual option, select the Manual
    option from the drop down in the pop up window as shown in the below
    Figure.

.. figure:: _static/10.28.png
    :align: center
    :alt: alternate text
    
    Pop Window with Manual option selected for Edit

After selecting the Manual option it will lead you to the Node **Enum**
with Edit option (see Figure below).

.. figure:: _static/10.29.png
    :align: center
    :alt: alternate text
    
    Enum Node with Edit option

15. Now click the Edit option as shown in the above Figure which will
    lead you to the Table Visualization page (see Figure below).

.. figure:: _static/10.30.png
    :align: center
    :alt: alternate text
    
    Table Visuals with Manual option

16. Here you will be able to edit the Label values individually for each
    month based on your need (see Figure above).

Dimensional Node Component
--------------------------

As part of valQ Release 3.0, as a Dimensional Node Component, now you
have the option to assign the Data Source at the Node Level for further
simulation.

The steps below explains on how you will be able to create the
Dimensional Node Component in a Tree:

1. For our example, create a layout in SAP Lumira Designer as shown in
   the below Figure.

.. figure:: _static/10.31.png
    :align: center
    :alt: alternate text
    
    Layout

2. In our example, you can observe that in a grid layout cell (0,1) has
   been assigned with the Value Driver Tree and cell (0,0) has been
   assigned with the Navigation Panel for the Value Driver Tree.

3. A Dimensional Node needs to be assigned at the top of the Grid Layout
   as shown in the above Figure.

4. Data Source DS_1 has been assigned to the Dimensional Node.

5. In our example, navigate to the Node Revenue for which the
   Dimensional Node has been assigned (see Figure below).

.. figure:: _static/10.32.png
    :align: center
    :alt: alternate text
    
    Tab Tree

6. In the area Calculation, set the property Calc. Method to the option
   Dimensional Node.

7. Set the property Dimensional Node to the text VDT_DIM_NODE_1.

8. In the area Simulation, set the property Default Method to the option
   Values set manually for each period. The other options are

-  % Change applied to baseline in future periods.

-  Constant Value for future periods.

-  % Growth applied to baseline in future periods.

9. Based on the above configuration, you will be able to observe the
   grid icon above the Node Revenue in the Runtime (see Figure below).

.. figure:: _static/10.33.jpg
    :align: center
    :alt: alternate text
    
    Revenue Node with Dimensional Node option

Search option in Additional Properties Sheet
--------------------------------------------

As part of valQ Release 3.1, you will be able perform the search function
in the Tree Tab as shown in the below Figure. You can view the specific
node based on your search. In our example shown below, the search was
done based on the Node ID.

.. figure:: _static/10.34.png
    :align: center
    :alt: alternate text
    
    Search based on Node ID

Quick Editor option in Tree Tab
-------------------------------

Using the Quick Editor option in the Tree Tab, you will be able to view
the entire Tree Hierarchy in a Grid View. For our example, the below
Figure shows the normal Tree Hierarchy View.

.. figure:: _static/10.35.png
    :align: center
    :alt: alternate text
    
    Normal Tree Hierarchy View

After clicking the Quick Edit option as shown in the above Figure, you
will be able to view the Grid View as shown below.

.. figure:: _static/10.36.png
    :align: center
    :alt: alternate text
    
    Grid View

In the Grid View, you will be able to edit the changes and save it so
that the changes will get reflected in the Tree Structure which can be
viewed in the canvas. In the Grid View, you can also Expand and Collapse
the Node Structure as well as view all the Columns by clicking the All
Columns option (see Figure below).

.. figure:: _static/10.37.png
    :align: center
    :alt: alternate text
    
    Expand, Collapse and All Columns options in Quick Editor

Prior Period in Formula
-----------------------

As part of the New Release, you will be able to insert the Prior Period Formula for the Node by navigating
to the Area Calculation in the Tree Tab. For our example, the Nodes "Total Cost" and "Profit" have been considered. 
For the Node "Profit", the Formula has been given as "PRIORPERIOD({9}, 10000000, 20000000)" (see Figure below). 

.. figure:: _static/pp1.png
    :align: center
    :width: 1000
    :alt: alternate text
    
    Formula for Prior Period 

Based on the above configuration, you can observe that the Node "Profit" will have the value 10000000 
for the Jan Month and the value 20000000 for the Feb Month. For the March Month, it will take the value 
of the Jan Month from the Node "Total Cost" and for the April Month, it will take the value 
of the Feb Month from the Node "Total Cost" till the end of Dec Month (see Figure below)

.. figure:: _static/pp2.png
    :align: center
    :width: 1000
    :alt: alternate text
    
    Node view for the Prior Period  



Additional Properties of Tree Tab 
----------------------------------

+-----------------------+-----------------------+-----------------------+
| **Area**              | **Property**          | **Description**       |
+=======================+=======================+=======================+
| TOP                   | Unique Id             | This property sets    |
|                       |                       | the Unique Id for the |
|                       |                       | Node.                 |
+-----------------------+-----------------------+-----------------------+
|                       | Title Prefix when     | This property sets    |
|                       | outside Tree          | the Title Prefix for  |
|                       |                       | the Node when outside |
|                       |                       | Tree.                 |
+-----------------------+-----------------------+-----------------------+
|                       | Title                 | This property sets    |
|                       |                       | the Title for the     |
|                       |                       | Node.                 |
+-----------------------+-----------------------+-----------------------+
| Calculation           | Calc. Method          | This property sets    |
|                       |                       | the Calculation       |
|                       |                       | Method for the Node.  |
|                       |                       | The options are Data  |
|                       |                       | Source, Sum Children  |
|                       |                       | (a+b+c….), Subtract   |
|                       |                       | Children (a-b-c….),   |
|                       |                       | Multiply Children     |
|                       |                       | (a*b*c….), Divide     |
|                       |                       | Children (a/b/c….),   |
|                       |                       | Formula. Linked to    |
|                       |                       | Node, Dimensional     |
|                       |                       | Node, Template based  |
|                       |                       | on other Node and     |
|                       |                       | Manual.               |
|                       |                       |                       |
|                       |                       | **Note:** When the    |
|                       |                       | Calc. Method is       |
|                       |                       | selected as Linked to |
|                       |                       | Node option, then you |
|                       |                       | can select the        |
|                       |                       | desired Node from the |
|                       |                       | Nodes List.           |
+-----------------------+-----------------------+-----------------------+
|                       | Source key            | This property sets    |
|                       |                       | the Source key for    |
|                       |                       | the Node. If          |
|                       |                       | Auto-mapped, only     |
|                       |                       | fill if id in source  |
|                       |                       | differ from node id.  |
+-----------------------+-----------------------+-----------------------+
|                       | Formula               | This property sets    |
|                       |                       | the Formula for the   |
|                       |                       | Node.                 |
+-----------------------+-----------------------+-----------------------+
|                       | Dimensional Node      | This property sets    |
|                       |                       | the Dimensional Node. |
+-----------------------+-----------------------+-----------------------+
|                       | Node to use as        | Using this property,  |
|                       | template              | you can select the    |
|                       |                       | desired Node from the |
|                       |                       | Nodes List to assign  |
|                       |                       | it as a Template.     |
+-----------------------+-----------------------+-----------------------+
|                       | Template child node   | This property sets    |
|                       | prefixes - Unique Id  | the Unique Id Prefix  |
|                       | Prefix                | for the Template      |
|                       |                       | child node.           |
+-----------------------+-----------------------+-----------------------+
|                       | Template child node   | This property sets    |
|                       | prefixes - Title      | the Title Prefix for  |
|                       | Prefix when outside   | the Template child    |
|                       | Tree                  | node when outside the |
|                       |                       | Tree.                 |
+-----------------------+-----------------------+-----------------------+
|                       | Manual Data - Primary | This property sets    |
|                       |                       | the Primary Data for  |
|                       |                       | the Node.             |
+-----------------------+-----------------------+-----------------------+
|                       | Manual Data -         | This property sets    |
|                       | Comparison            | the Comparison Data   |
|                       |                       | for the Node.         |
+-----------------------+-----------------------+-----------------------+
|                       | Time Aggregation      | This property sets    |
|                       |                       | the Time Aggregation  |
|                       |                       | for the Node. The     |
|                       |                       | options are Sum of    |
|                       |                       | Periods, Average,     |
|                       |                       | Formula, Last and     |
|                       |                       | Cumulative.           |
+-----------------------+-----------------------+-----------------------+
|                       | Desired Trend         | This property sets    |
|                       |                       | the Desired Trend for |
|                       |                       | the Node. The options |
|                       |                       | are Decrease and      |
|                       |                       | Increase.             |
+-----------------------+-----------------------+-----------------------+
|                       | Value Range           | This property sets    |
|                       |                       | the Value Range for   |
|                       |                       | the Node.             |
+-----------------------+-----------------------+-----------------------+
|                       | Enable Fixed Value    | This property         |
|                       | List                  | enables/disables the  |
|                       |                       | Enable Fixed Value    |
|                       |                       | List option.          |
+-----------------------+-----------------------+-----------------------+
|                       | Simulation            | This property sets    |
|                       |                       | the Simulation for    |
|                       |                       | the Node. The options |
|                       |                       | are All, Nodes        |
|                       |                       | without Children and  |
|                       |                       | None.                 |
+-----------------------+-----------------------+-----------------------+
| Display               | Visual Style          | This property sets    |
|                       |                       | the Visual Style for  |
|                       |                       | the Node. The options |
|                       |                       | are Normal, Derived   |
|                       |                       | and Hidden.           |
+-----------------------+-----------------------+-----------------------+
|                       | Scaling               | This property sets    |
|                       |                       | the Scaling for the   |
|                       |                       | Node. The options are |
|                       |                       | None, User Selected,  |
|                       |                       | 0m, 0k and Pct.       |
+-----------------------+-----------------------+-----------------------+
|                       | Value Display         | This property sets    |
|                       |                       | the Value Display for |
|                       |                       | the Node. The options |
|                       |                       | are Prefix, Decimals  |
|                       |                       | starting from 0 to 7  |
|                       |                       | and Suffix.           |
+-----------------------+-----------------------+-----------------------+
|                       | Features              | This property sets    |
|                       |                       | the Features for the  |
|                       |                       | Node. The options are |
|                       |                       | Simulation, Status    |
|                       |                       | Color and Details on  |
|                       |                       | Click.                |
+-----------------------+-----------------------+-----------------------+
|                       | Detail Page Type      | This property sets    |
|                       |                       | the Detail Page Type  |
|                       |                       | for the Node. The     |
|                       |                       | options are Default   |
|                       |                       | and Node Specific.    |
+-----------------------+-----------------------+-----------------------+
| Simulation            | Default Method        | This property sets    |
|                       |                       | the Default           |
|                       |                       | Simulation Method for |
|                       |                       | the Node. The options |
|                       |                       | are % Change applied  |
|                       |                       | to baseline in future |
|                       |                       | periods, Constant     |
|                       |                       | value for future      |
|                       |                       | periods, % Growth     |
|                       |                       | applied to baseline   |
|                       |                       | in future periods and |
|                       |                       | Value set manually    |
|                       |                       | for each period.      |
+-----------------------+-----------------------+-----------------------+
|                       | Link Simulation       | Using this property,  |
|                       |                       | you can select the    |
|                       |                       | desired Node from the |
|                       |                       | Nodes List for Link   |
|                       |                       | Simulation.           |
+-----------------------+-----------------------+-----------------------+
| Business Definition   | Description           | This property sets    |
|                       |                       | the Description for   |
|                       |                       | the Node.             |
+-----------------------+-----------------------+-----------------------+
|                       | Header                | This property sets    |
|                       |                       | the Header for the    |
|                       |                       | Node.                 |
+-----------------------+-----------------------+-----------------------+
|                       | Footer                | This property sets    |
|                       |                       | the Footer for the    |
|                       |                       | Node.                 |
+-----------------------+-----------------------+-----------------------+
|                       | Technical Note        | This property sets    |
|                       |                       | the Technical Note    |
|                       |                       | for the Node.         |
+-----------------------+-----------------------+-----------------------+

*Tree Tab*

Settings Tab
------------

In the Settings Tab, you will be able to configure the properties for
the entire Tree.

The steps below explains on how to configure the properties for the
entire Tree created with Parent Node and Child Nodes:

1. For our example, navigate to the right panel of the Settings Tab
   where you can view the properties to be configured for the entire
   Tree (see Figure below).

.. figure:: _static/10.38.png
    :align: center
    :alt: alternate text
    
    Settings Tab – Initial State, Status and Visualization

2.  In the area Initial State, set the property Active Period to the
    values from 1 to 12 (see Figure above).

3.  Set the property Top Node to the option First Node.

4.  Set the property Show Levels to the value 2.

5.  Set the property Zoom to the value 100%.

6.  Set the property Primary Value to the option Total of Periods.

7.  For the property Scale, set the value to 0.

8.  Set the Scale Suffix Property to the required values as shown in the
    above Figure.

9.  In the Number Format property, set the property Zero Display to the
    option 0, set the sub property Negative Display to the option 0-,
    set the sub property Decimal Separator to “.” and set the Thousand
    Separator to “,”.

10. Activate the property Enable Tree Editing at Runtime.

11. Enter the Hint Notes for the property Hint.

12. In the area Visualization, for the property Status, set the sub
    property RED to the value “-10%”, set the sub property AMBER to the
    value “-1%”, set the sub property GREEN to the value “5%” (see
    Figure above).

13. Set the property Visual Style to the option Tree. The other option
    is Table.

14. For our example, set the property Default Tree Style to the option
    “Full (More space for more digits but fewer widgets on a page)”.

**Visual Style:** 
When the property Visual Style is set to the option Tree, you can select
the property Default Node Style to the option based on your choice. When
the property Visual Style is set to the option Table, you can select the
property Default Table Style to the option based on your choice.

15. In the area Driver Widget Layout, set the property Status Bar to the
    option Variance (see Figure below).

.. figure:: _static/10.39.png
    :align: center
    :alt: alternate text
    
    Settings Tab – Driver Widget Layout and Colors

16. Activate the property Variance.

17. Activate the property Trend spark line.

18. Activate the property Secondary Value/Variance.

19. Activate the property Node Operand.

20. In the area Colors we have four different properties namely Canvas
    Background, Tree Widget, Tree Links and Standard Palettes. It is to
    be noted that all the color selections will be represented in the
    Hexadecimal color formats.

21. For the property Canvas Background, set the sub property Base to the
    color code “#E2E8EF”.

22. Set the sub property Accent 1 to the color code “#C5DADC”, set the
    sub property Accent 2 to the color code “#91ABBF” and set the sub
    property Accent 3 to the color code “#CFDDE7 “.

23. For the property Tree Widget, set the following sub properties to
    the values as shown in the Table below:

+-----------------+-------------------+
| Sub property    | Color Code Values |
+=================+===================+
| Primary Font    | #000000           |
+-----------------+-------------------+
| Secondary Font  | #777777           |
+-----------------+-------------------+
| Simulation Font | #2E8AB8           |
+-----------------+-------------------+
| Background      | #FFFFFF           |
+-----------------+-------------------+
| Derived nodes   | #FFFFFF           |
+-----------------+-------------------+
| Opacity         | 0.3               |
+-----------------+-------------------+
| Border          | #000000           |
+-----------------+-------------------+
| Opacity         | 0.2               |
+-----------------+-------------------+
| Highlighted     | #2E8AB8           |
+-----------------+-------------------+

*Tree Widget Sub properties*

24. For the property Tree Links, set the sub property Line to the color
    code “#666666”.

25. In the area Events, set the property Default Action to the option
    “Show Embedded Standard Detail Popup” (see Figure below).

.. figure:: _static/10.40.png
    :align: center
    :alt: alternate text
    
    Settings Tab – Events

26. For the property Export Node, set the sub property Export Mode to
    the option “BIAL Script”.

Scale Suffix
~~~~~~~~~~~~

As part of valQ Release 2.0.5, the user will now be able to customize the
Scale Suffix as shown below

.. figure:: _static/10.41.png
    :align: center
    :alt: alternate text
    
    Settings Tab – Initial State

For our example, 2000 can be represented as 2K, 2k, 2Th by providing
appropriate value in Thousand field of “Scale Suffix” (see Figure
above).

Formatting of Numeric Values
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

As part of valQ Release 2.0.5, the user will be able to format the
numeric values using custom “Decimal Separator” and “Thousand Separator”
(see Figure below).

.. figure:: _static/10.42.png
    :align: center
    :alt: alternate text
    
    Settings Tab – Initial State

Write simulation results to underlying systems
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

As part of valQ Release 2.0.5, you can write back the calculated data for
any node in the active scenario. To expose the data, assign the
nodesToExport() function to a button or similar. The nodes exported can
then be retrieved in onWriteBack event using getNodeData() or directly
posted to a URL depending on the Export Mode selected below.

Steps to be followed for writing simulation results to underlying systems
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

1. The Node ID will be defined in the Tab Tree of the Additional
   Properties for the Value Driver Tree (see Figure below).

.. figure:: _static/10.43.png
    :align: center
    :alt: alternate text
    
    Node ID

2. On button click event, write the script as shown in the below screen.
   The script method “nodesToExport” takes Array of Node Ids or no
   parameter to export all the nodes.

.. figure:: _static/10.44.png
    :align: center
    :alt: alternate text
    
    Script Editor

3. Navigate to Settings > Events > Export Node

4. Select “Export Mode”

5. Export Mode = “BIAL Script”

6. Provide the script in “On Writeback “

.. figure:: _static/10.45.png
    :align: center
    :alt: alternate text
    
    Export Node – BIAL Script

/****\* Data Structure of Exported Data \*****/

{

"context": {

"name": "1",

"title": "Scenario 1",

"descr": "Revenue: 51% \\nTotal Cost: (44%)",

"simVar": [{

"name": "1",

"value": "51.44",

"manSim": [],

"sMeth": "P"

}, {

"name": "9",

"value": "-44.30",

"manSim": [],

"sMeth": "P"

}

]

},

"data": [{

"name": "1",

"results": [{

"key": "1",

"text": "Jan",

"act": 39985500,

"base": 26403525.97,

"tgt": 26776114.98

}

]

}, {

"name": "9",

"results": [{

"key": "1",

"text": "Jan",

"act": 49985500,

"base": 36403525.97,

"tgt": 36776114.98

}

]

}

]

}

/****\* Sample Code to demonstrate looping and extracting required
information \*****/

var exportedData = me.getNodeData(['1', '9']);

var acts = '';

exportedData.data.forEach(function(node, i) {

acts = acts + ' ::: ' + node.name + ' => ';

node.results.forEach(function(result, j) {

acts = acts + ', ' + result.act;

});

});

var context = exportedData.context.descr +

', ' + exportedData.context.name +

', ' + exportedData.context.title;

exportedData.context.simVar.forEach(function(ele, i){

context = context + ' ::: ' + ele.name + ', ' +

ele.value + ' => ';

ele.manSim.forEach(function(element, index) {

context = context + ', ' + element;

});

});

APPLICATION.log(acts);

7. Export Mode = “URL”

8. Provide the web service url / REST Endpoint in the “Export Url”
   field.

.. figure:: _static/10.46.png
    :align: center
    :alt: alternate text
    
    Export Node - URL

As part of the New Release, you will be now able to write simulation results involving multiple 
scenarios with multiple initiatives by posting it to a URL. The sample JSON data structure of the exported 
data is shown below

.. figure:: _static/newwb1.png
    :align: center
    :alt: alternate text
    
    Sample JSON for Scenario 1

.. figure:: _static/newwb2.png
    :align: center
    :alt: alternate text
    
    Sample JSON for Initiative 1 in Scenario 1     

Negative Value Format
~~~~~~~~~~~~~~~~~~~~~

As part of valQ Release 3.0, navigate to the Tab Settings in the
Additional Properties of the VDT. In the area Initial State, now you
have the ability to set the option for the property Negative Display.
The options are (0), -0 and 0-. For our example, the option 0- has been
selected as shown in the below figure. When the option (0) is selected
then you can view the whole number in the node.

.. figure:: _static/10.47.png
    :align: center
    :alt: alternate text
    
    Negative Display

Based on the above configuration you will be able to observe that the
values in the nodes will be highlighted with selected Negative Display
option.

.. figure:: _static/10.48.png
    :align: center
    :alt: alternate text
    
    Negative Display in Runtime

Visualization
~~~~~~~~~~~~~

As part of valQ Release 3.0, navigate to the Tab Settings in the
Additional Properties of the VDT. In the area Visualization, now you
have the ability to configure the Table Style and Node Style using the
properties Default Table Style and Default Node Style.

Tree Style
~~~~~~~~~~

For our example, set the property Visual Style to the option Tree. Set
the property Default Node Style to the option “Full (More space for more
digits but fewer widgets on a page) as shown in the below Figure. The
other options are “Standard (Good compromise between space and widget
density)” and “Minimal : (no trend and secondary information).

.. figure:: _static/10.49.png
    :align: center
    :alt: alternate text
    
    Default Node Style

Based on the above configuration, you will be able to observe that the
Node will have more space for more digits but will have fewer widgets on
a page as shown in the below Figure.

.. figure:: _static/10.50.png
    :align: center
    :alt: alternate text
    
    Node selected as Full Mode

Table Style
~~~~~~~~~~~

For our example, set the property Visual Style to the option Table. Set
the property Default Table Style to the option “Full (Primary and
Comparison data with node trend) as shown in the below Figure. The other
options are “Standard (Primary data with node trend)” and “Minimal :
(Primary data without node trend)”.

.. figure:: _static/10.51.png
    :align: center
    :alt: alternate text
    
    Default Table Style

Based on the above configuration, you will be able to observe that the
Table will have the Primary data with node trend as shown in the below
Figure.

.. figure:: _static/10.52.png
    :align: center
    :alt: alternate text
    
    Table selected as Full Mode

Visualization in Runtime
~~~~~~~~~~~~~~~~~~~~~~~~

In the VDT Runtime, there are two types of Visualizations namely Tree
Visualization and Table Visualization (see Figure below).

.. figure:: _static/10.53.png
    :align: center
    :alt: alternate text
    
    Visualization in Run time

Tree Visualization
^^^^^^^^^^^^^^^^^^

In Tree Visualization, there are three different styles (see Figure
below). The styles are listed as follows:

1. Standard

2. Full

3. Minimal

.. figure:: _static/10.54.png
    :align: center
    :alt: alternate text
    
    Tree Visualization in Run time

Standard Style:

In Standard Style, you will be able to view the Tree with the Node
having good compromise between space and widget density (see Figure
below).

.. figure:: _static/10.55.png
    :align: center
    :alt: alternate text
    
    Tree Visualization in Standard Style

Full Style:

In Full Style, you will be able to view the Tree with the Node having
more space for more digits but fewer widgets on a page (see Figure
below).

.. figure:: _static/10.56.png
    :align: center
    :alt: alternate text
    
    Tree Visualization in Full Style

Minimal Style:

In Minimal Style, you will be able to view the Tree with the Node
without trend and secondary information (see Figure below).

.. figure:: _static/10.57.png
    :align: center
    :alt: alternate text
    
    Tree Visualization in Minimal Style

Table Visualization
^^^^^^^^^^^^^^^^^^^

In Table Visualization, there are two different styles (see Figure
below). The styles are listed as follows:

1. Standard

2. Full

.. figure:: _static/10.58.png
    :align: center
    :alt: alternate text
    
    Table Visualization in Run time

Standard Style:

In Standard Style, you will be able to view the Table having Primary
Data with the Node Trend (see Figure below).

.. figure:: _static/10.59.png
    :align: center
    :alt: alternate text
    
    Table Visualization in Standard Style

Full Style:

In Full Style, you will be able to view the Table having Primary and
Comparison Data with the Node Trend (see Figure below).

.. figure:: _static/10.60.png
    :align: center
    :alt: alternate text
    
    Table Visualization in Full Style

As part of the New Release, "Toggle on Expand" option is included in the area Visualization of the Settings Tab. 

.. figure:: _static/tog1.png
    :align: center
    :alt: alternate text
    
    Toggle on Expand 

By enabling this option, you will be able to expand the desired Node and once it is expanded, all the other expanded Nodes at this condition will get collapsed. 
In our example, the Node Revenue has been already expanded (see Figure below).

.. figure:: _static/tog2.png
    :align: center
    :alt: alternate text
    
    Node Revenue at Expanded state

Now expand the Node Total Cost and you can observe that the Node Revenue has been collapsed (see Figure below).

.. figure:: _static/tog3.png
    :align: center
    :alt: alternate text
    
    Node Total Cost at Expanded state and Node Revenue at Collapsed state


Enable Tree Editing in Runtime
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

As part of valQ Release 3.0, navigate to the Tab Settings in the
Additional Properties of the VDT. In the area Initial State, you will be
able to edit the Nodes in the Tree by enabling the property Enable Tree
Editing at Runtime (see Figure below).

.. figure:: _static/10.61.png
    :align: center
    :alt: alternate text
    
    Enable Tree Editing at Runtime

Based on the above configuration you can observe that the Nodes in the
Tree can be moved to the desired Node level by clicking the Edit Mode
option at the bottom of the Runtime screen. At the same time number of
child nodes can be also created under a respective node as its copy
versions.

For our example, you can observe that the Node “Salary Net Income” in
the Runtime is at the branch node level of the Node “Income” (see Figure
below).

.. figure:: _static/10.62.png
    :align: center
    :alt: alternate text
    
    Tree with Nodes – Edit Mode

Now using the Edit Mode option as shown in the above Figure, you can
drag/move the Node “Salary Net Income “ as a branch node for the Node
“Expenses” (see Figure below).

.. figure:: _static/10.63.png
    :align: center
    :alt: alternate text
    
    Tree with Nodes after Editing

Also you can create number of child nodes under a specific node as its
copy versions. For our example, 3 child nodes have been created under
the Node Savings (see Figure below).

.. figure:: _static/10.64.png
    :align: center
    :alt: alternate text
    
    Nodes created as copied versions

Enable Tooltip in Settings Tab
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

As part of valQ Release 3.1, you will be able to enable/disable the
Tooltip in the Nodes by navigating to the Settings Tab and to the area
Initial State (see Figure below).

.. figure:: _static/10.65.png
    :align: center
    :alt: alternate text
    
    Enable Tooltip in Settings Tab

Based on the above configuration, you will be able to view the Tooltip
showing the Node details by a hovering over the Node (see Figure below).

.. figure:: _static/10.66.png
    :align: center
    :alt: alternate text
    
    Tooltip showing the Node details

Enable Search in Settings Tab
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

As part of valQ Release 3.1, you will be able to enable/disable the
Search option for the Value Driver Tree canvas region by navigating to
the Settings Tab and to the area Initial State (see Figure below).

.. figure:: _static/10.67.png
    :align: center
    :alt: alternate text
    
    Enable Search in Settings Tab

Based on the above configuration, you will be now able to view the value
Driver Tree canvas region with Search option. You can provide the name
of the Node or Node ID as Search details (see Figure below).

.. figure:: _static/10.68.png
    :align: center
    :alt: alternate text
    
    Node ID given as Search item

Based on the Search item as shown in the above Figure, you will be able
to view the Value Driver Tree with the Node having the Node ID as 41.

.. figure:: _static/10.69.png
    :align: center
    :alt: alternate text
    
    Search based on Node ID*

Enable Search in Navigation Panel
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

As part of valQ Release 3.1, you will be able to enable/disable the
Search option in the Standard properties of the Navigation Panel for Top
Node, Key Assumptions and KPI List (see Figure below).

.. figure:: _static/10.70.png
    :align: center
    :alt: alternate text
    
    Standard Properties of the Navigation Panel

Based on the configuration as done in the above Figure, you will be able
to view the Navigation Panel with Search option for Top Node, Key
Assumptions and KPI List (see Figure below).

.. figure:: _static/10.71.png
    :align: center
    :alt: alternate text
    
    Navigation Panel with Search options*

In our example, the search item “stock” has given in the Top Node Search
Field (see Figure below).

.. figure:: _static/10.72.png
    :align: center
    :alt: alternate text
    
    Search Field for Top Node

Based on the Search, the Nodes which are having stock will get displayed
as shown in the below Figure.

.. figure:: _static/10.73.png
    :align: center
    :alt: alternate text
    
    Search based on Top Node

It is to be noted that the search items provided in the Navigation Panel
can be also pinned so that it gets listed as shown in the below Figure.

.. figure:: _static/10.74.png
    :align: center
    :alt: alternate text
    
    Search item list when pinned

When clicked it will be displayed in detail as a separate Node (see
Figure below).

.. figure:: _static/10.75.png
    :align: center
    :alt: alternate text
    
    Pinned search item viewed as separate Node*

Waterfall Type Selection
~~~~~~~~~~~~~~~~~~~~~~~~

By default, the Detail Page in the Value Driver Tree has vertical
waterfall chart type. As part of valQ Release 3.1, the option for
displaying the waterfall chart as horizontal type has been included (see
Figure below).

.. figure:: _static/10.76.png
    :align: center
    :alt: alternate text
    
    Horizontal Waterfall Chart type in Settings

Based on the above configuration, you will be able to view the
Horizontal Waterfall Type chart in the Detail Page as shown in the below
Figure.

.. figure:: _static/10.77.png
    :align: center
    :alt: alternate text
    
    Horizontal Waterfall Chart type in Detail Page

Show Children Count
~~~~~~~~~~~~~~~~~~~

As part of valQ Release 3.1, you will be able to visualize the Total
Count of Children Nodes when the Parent Node is collapsed. This is
achieved by activating the property Show Children Count When Collapsed
in the Settings Tab as shown in the below Figure.

.. figure:: _static/10.78.png
    :align: center
    :alt: alternate text
    
    Enable Show Children Count When Collapsed

Based on the above configuration, you will be able to view the Total
Count of Children Nodes when the Parent Node is collapsed (see Figure
below).

.. figure:: _static/10.79.png
    :align: center
    :alt: alternate text
    
    Children Nodes Count Display when Parent Node is collapsed

.. _COF:

Conditional Formatting
~~~~~~~~~~~~~~~~~~~~~~

As part of the New Release, conditional formatting feature has been included. Navigate to the Settings Tab in the Additional Properties Sheet. In the area Conditional Formatting, you will be able to set the Conditional Formatting Rules for the Tree. The Status Bar color selection for the Nodes can be done (see Figure below). You will be able to configure the following properties for the Conditional Formatting.

.. figure:: _static/cf1.png
    :align: center
    :alt: alternate text

    Conditional Formatting Settings for the Status Bar as Variance

2.	Now select the option Variance as shown in the above Figure. Now configure the Conditional Formatting values as highlighted in the above Figure. Based on the above settings, you will be able to view the Tree as shown below.

.. figure:: _static/cf2.png
    :align: center
    :alt: alternate text

    Conditional Formatting - Format based on Variance Percentage

3.	After simulation, you can observe that the variance percentage value for the Node “Income” falls in the Threshold range 22% which is above 0% and based on that condition, the status bar for the Node is green color (see Figure above). Similarly the variance percentage value for the Node “Investment and Others” falls in the Threshold range -26% which is below -10% and based on that condition, the status bar for the Node is red color.
4.	Now select the option Simulation as shown in the below Figure.

.. figure:: _static/cf3.png
    :align: center
    :alt: alternate text
 
    Conditional Formatting Settings for the Status Bar as Simulation Impact 
 
5.	Based on the above settings, you will be able to view the Tree as shown below.

.. figure:: _static/cf4.png
    :align: center
    :alt: alternate text
 
    Conditional Formatting - Format based on Simulation Impact

6.	After simulation, you can observe that the simulation percentage value for the Node “Revenue” falls in the Threshold range 37% which is above 0% and based on that condition, the status bar for the Node is green color (see Figure above). Now simulate the value for the Node Revenue to the left side in the Threshold Range 

.. figure:: _static/cf5.png
    :align: center
    :alt: alternate text  

    Node Revenue after Simulation

7.	 Similarly the simulation percentage value for the Node “Revenue” falls in the Threshold range (-33%) which is below 0% and based on that condition, the status bar for the Node is red color.
8.	Now select the option Simulation as shown in the below Figure.

.. figure:: _static/cf6.png
    :align: center
    :alt: alternate text
 
    Status Bar as Hidden

9.	When the Status Bar option is selected as “Hidden”, then you will not be able to see any status bar based on the simulation (see Figure below).

.. figure:: _static/cf7.png
    :align: center
    :alt: alternate text

    Node Revenue without Status Bar

Node Level Conditional Formatting
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The above conditional Formatting settings can be also applied at the specific Node level by navigating to the Tree tab and select the Area Display for the specific Node. Here you configure the conditional formatting at the Node Level ( see Figure below). In our example, the configuration has been done for Node Revenue.

.. figure:: _static/cf8.png
    :align: center
    :alt: alternate text
 
    Status Bar selection in the Display Area

When the Status Bar is selected as “Global” option, then the specific Node Revenue will follow the Global settings done in the Settings Tab (:ref:`Refer Section: Conditional Formatting <COF>`).

When the Status Bar is selected as “Variance” option, then you will be able to set the colors for the Threshold Ranges for the specific Node Revenue (:ref:`Refer Section: Conditional Formatting <COF>`).

When the Status Bar is selected as “Hidden” option, then you will not be able to see any status bar for the specific Node Revenue based on the simulation (:ref:`Refer Section: Conditional Formatting <COF>`).

Additional Properties of Settings Tab
-------------------------------------

+-----------------------+-----------------------+-----------------------+
| **Area**              | **Property**          | **Description**       |
+=======================+=======================+=======================+
| Initial State         | Active Period         | This property sets    |
|                       |                       | the Active Period for |
|                       |                       | the Tree.             |
+-----------------------+-----------------------+-----------------------+
|                       | Top Node              | Using this property,  |
|                       |                       | you can select the    |
|                       |                       | desired Node from the |
|                       |                       | Nodes List to assign  |
|                       |                       | the Top Node for the  |
|                       |                       | Tree.                 |
+-----------------------+-----------------------+-----------------------+
|                       | Show Levels           | This property sets    |
|                       |                       | the Levels for the    |
|                       |                       | Tree.                 |
+-----------------------+-----------------------+-----------------------+
|                       | Zoom                  | This property sets    |
|                       |                       | the Zoom Level for    |
|                       |                       | the Tree.             |
+-----------------------+-----------------------+-----------------------+
|                       | Primary Value         | This property sets    |
|                       |                       | the Primary Value for |
|                       |                       | the Tree. The options |
|                       |                       | are Active Period,    |
|                       |                       | Total to Period,      |
|                       |                       | Total of Periods and  |
|                       |                       | Selected Simulation   |
|                       |                       | Interval.             |
+-----------------------+-----------------------+-----------------------+
|                       | Auto Scale            | This property sets    |
|                       |                       | the Auto scale for    |
|                       |                       | the Tree. The options |
|                       |                       | are 0, 0.0b, 0.00b,   |
|                       |                       | 0m, 0.0m, 0.00m, 0k   |
|                       |                       | and 0.                |
+-----------------------+-----------------------+-----------------------+
|                       | Scale Suffix          | This property sets    |
|                       |                       | the Thousand, Million |
|                       |                       | and Billion suffix    |
|                       |                       | for the scale.        |
+-----------------------+-----------------------+-----------------------+
|                       | Number Format         | This property sets    |
|                       |                       | the Zero Display,     |
|                       |                       | Negative Display,     |
|                       |                       | Decimal Separator and |
|                       |                       | Thousand Separator.   |
|                       |                       | The options for Zero  |
|                       |                       | Display are None, 0   |
|                       |                       | and -. The options    |
|                       |                       | for Negative Display  |
|                       |                       | are (0), -0 and 0-.   |
+-----------------------+-----------------------+-----------------------+
|                       | Enable Tree Editing   | This property         |
|                       | at Runtime            | enables/disables the  |
|                       |                       | Tree Editing at       |
|                       |                       | Runtime.              |
+-----------------------+-----------------------+-----------------------+
|                       | Hint                  | This property sets    |
|                       |                       | the Hint for the      |
|                       |                       | Tree.                 |
+-----------------------+-----------------------+-----------------------+
| Status                | RED                   | This property sets    |
|                       |                       | the RED color         |
|                       |                       | vertical bar in the   |
|                       |                       | Node based on the     |
|                       |                       | simulated value of    |
|                       |                       | the Node.             |
+-----------------------+-----------------------+-----------------------+
|                       | AMBER                 | This property sets    |
|                       |                       | the AMBER color       |
|                       |                       | vertical bar in the   |
|                       |                       | Node based on the     |
|                       |                       | simulated value of    |
|                       |                       | the Node.             |
+-----------------------+-----------------------+-----------------------+
|                       | NEUTRAL               | This property sets    |
|                       |                       | NEUTRAL Status in the |
|                       |                       | Node based on the     |
|                       |                       | simulated value of    |
|                       |                       | the Node.             |
+-----------------------+-----------------------+-----------------------+
|                       | GREEN                 | This property sets    |
|                       |                       | the GREEN color       |
|                       |                       | vertical bar in the   |
|                       |                       | Node based on the     |
|                       |                       | simulated value of    |
|                       |                       | the Node.             |
+-----------------------+-----------------------+-----------------------+
| Visualization         | Visual Style          | This property sets    |
|                       |                       | the Visual Style for  |
|                       |                       | the Tree. The options |
|                       |                       | are Tree and Table.   |
+-----------------------+-----------------------+-----------------------+
|                       | Default Table Style   | This property sets    |
|                       |                       | the Default Table     |
|                       |                       | Style for the Tree.   |
|                       |                       | The options are       |
|                       |                       | Standard (Primary     |
|                       |                       | Data with Node Trend) |
|                       |                       | and Full (Primary and |
|                       |                       | Comparison data with  |
|                       |                       | Node Trend).          |
+-----------------------+-----------------------+-----------------------+
|                       | Table Cell Alignment  | This property sets    |
|                       |                       | the text alignment in |
|                       |                       | the Table Cell. The   |
|                       |                       | options are Left,     |
|                       |                       | Center and Right.     |
+-----------------------+-----------------------+-----------------------+
|                       | Default Node Style    | This property sets    |
|                       |                       | the Default Node      |
|                       |                       | Style for the Tree.   |
|                       |                       | The options are       |
|                       |                       | Standard (Good        |
|                       |                       | compromise between    |
|                       |                       | space and widget      |
|                       |                       | density), Full (More  |
|                       |                       | space for more digits |
|                       |                       | but fewer widgets on  |
|                       |                       | a page) and Minimal   |
|                       |                       | (no trend and         |
|                       |                       | secondary             |
|                       |                       | information).         |
+-----------------------+-----------------------+-----------------------+
| Driver Widget Layout  | Status Bar            | This property sets    |
|                       |                       | the Status Bar. The   |
|                       |                       | options are Variance, |
|                       |                       | Simulation Impact and |
|                       |                       | Hidden.               |
+-----------------------+-----------------------+-----------------------+
|                       | Variance              | This property         |
|                       |                       | enables/disables the  |
|                       |                       | Variance option.      |
+-----------------------+-----------------------+-----------------------+
|                       | Trend spark line      | This property         |
|                       |                       | enables/disables the  |
|                       |                       | Trend spark line      |
|                       |                       | option.               |
+-----------------------+-----------------------+-----------------------+
|                       | Secondary             | This property         |
|                       | Value/Variance        | enables/disables the  |
|                       |                       | Secondary             |
|                       |                       | Value/Variance        |
|                       |                       | option.               |
+-----------------------+-----------------------+-----------------------+
|                       | Node Operand          | This property         |
|                       |                       | enables/disables the  |
|                       |                       | Node Operand option.  |
+-----------------------+-----------------------+-----------------------+
| Colors - Canvas       | Base                  | This property sets    |
| Background            |                       | the Base color.       |
+-----------------------+-----------------------+-----------------------+
|                       | Accent 1              | This property sets    |
|                       |                       | the Accent 1 color.   |
+-----------------------+-----------------------+-----------------------+
|                       | Accent 2              | This property sets    |
|                       |                       | the Accent 2 color.   |
+-----------------------+-----------------------+-----------------------+
|                       | Accent 3              | This property sets    |
|                       |                       | the Accent 3 color.   |
+-----------------------+-----------------------+-----------------------+
| Colors - Tree Widget  | Primary Font          | This property sets    |
|                       |                       | the Primary Font      |
|                       |                       | color.                |
+-----------------------+-----------------------+-----------------------+
|                       | Secondary Font        | This property sets    |
|                       |                       | the Secondary Font    |
|                       |                       | color.                |
+-----------------------+-----------------------+-----------------------+
|                       | Simulation Font       | This property sets    |
|                       |                       | the Simulation Font   |
|                       |                       | color.                |
+-----------------------+-----------------------+-----------------------+
|                       | Background            | This property sets    |
|                       |                       | the Background color. |
+-----------------------+-----------------------+-----------------------+
|                       | Opacity               | This property sets    |
|                       |                       | the Opacity for the   |
|                       |                       | Background color.     |
+-----------------------+-----------------------+-----------------------+
|                       | Derived Nodes         | This property sets    |
|                       |                       | the color for the     |
|                       |                       | Derived Nodes.        |
+-----------------------+-----------------------+-----------------------+
|                       | Opacity               | This property sets    |
|                       |                       | the Opacity for the   |
|                       |                       | Derived Nodes Color.  |
+-----------------------+-----------------------+-----------------------+
|                       | Border                | This property sets    |
|                       |                       | the Border color.     |
+-----------------------+-----------------------+-----------------------+
|                       | Opacity               | This property sets    |
|                       |                       | the Opacity for the   |
|                       |                       | Border color.         |
+-----------------------+-----------------------+-----------------------+
|                       | Highlighted           | This property sets    |
|                       |                       | the Highlighted       |
|                       |                       | color.                |
+-----------------------+-----------------------+-----------------------+
| Colors - Tree Links   | Line                  | This property sets    |
|                       |                       | the Line color.       |
+-----------------------+-----------------------+-----------------------+
| Colors - Standard     | Light (Standard)      | This property sets    |
| Palettes              |                       | the Light Standard    |
|                       |                       | Palette.              |
+-----------------------+-----------------------+-----------------------+
|                       | Light on Dark         | This property sets    |
|                       | Background            | the Light on Dark     |
|                       |                       | Background Palette.   |
+-----------------------+-----------------------+-----------------------+
|                       | Dark Widgets          | This property sets    |
|                       |                       | the Dark Widgets      |
|                       |                       | Palette.              |
+-----------------------+-----------------------+-----------------------+
| Events                | On Node Click         | This Event will be    |
|                       |                       | triggered on Node     |
|                       |                       | Click.                |
+-----------------------+-----------------------+-----------------------+
|                       | Default Action        | This property sets    |
|                       |                       | the Default Action    |
|                       |                       | for the Node Click.   |
+-----------------------+-----------------------+-----------------------+
|                       | Custom Detail PopUp   | This property sets    |
|                       | Reference             | the Custom Detail     |
|                       |                       | PopUp Reference.      |
+-----------------------+-----------------------+-----------------------+
|                       | After Calculation     | This Event will be    |
|                       |                       | triggered after       |
|                       |                       | calculation.          |
+-----------------------+-----------------------+-----------------------+
|                       | After Simulation      | This Event will be    |
|                       |                       | triggered after       |
|                       |                       | simulation.           |
+-----------------------+-----------------------+-----------------------+
|                       | On PopUp Chart Column | This Event will be    |
|                       | Click                 | triggered on PopUp    |
|                       |                       | Chart Column Click.   |
+-----------------------+-----------------------+-----------------------+
| Events - Export Node  | Export Mode           | This property sets    |
|                       |                       | the Export Mode for   |
|                       |                       | the Node. The options |
|                       |                       | are BIAL Script and   |
|                       |                       | URL.                  |
+-----------------------+-----------------------+-----------------------+
|                       | On WriteBack          | This Event will be    |
|                       |                       | triggered on          |
|                       |                       | WriteBack.            |
+-----------------------+-----------------------+-----------------------+

*Settings Tab*

Data Tab
--------

In the Data Tab, you will be able to configure the Data related
properties for the entire Tree.

The steps below explains on how to configure the Data related properties
for the entire Tree:

1. Now navigate to the Data Tab (see Figure below).

.. figure:: _static/10.80.png
    :align: center
    :alt: alternate text
    
    Data Tab – Node Mapping

2. In the area Node Mapping, set the property Node Mapping Field to the
   option “Automatic based on text”.

3. Set the property Node ID Separator to “:”.

4. Activate the property Use Manual Data as defaults if sourced nodes
   not available in result set.

5. In the area Data Series, activate the property “with Comparison data
   series” (see Figure below).

.. figure:: _static/10.81.png
    :align: center
    :alt: alternate text
    
    Data Tab – Data Series and Time Aggregation Display

6. For the property Data series labels, enter the label for the sub
   property Primary as “Forecast” and enter the label for the sub
   property Comparison as “Budget”.

7. Set the property Periods per data series to the value 12.

8. Set the property Period Labels as “Jan, Feb, Mar, Apr, May, Jun, Jul,
   Aug, Sep, Oct, Nov, Dec”.

9. In the area Time Aggregation Display set the properties and their sub
   properties to the values as shown in the Table below:

+-----------------+-----------------+-----------------+-----------------+
| **Property**    | **Sub           |                 |                 |
|                 | properties**    |                 |                 |
+=================+=================+=================+=================+
|                 | **Label**       | **3 letter      | **Secondary     |
|                 |                 | abbreviation**  | value when      |
|                 |                 |                 | displayed**     |
+-----------------+-----------------+-----------------+-----------------+
| Active Period   | Month           | Mth             | Total of        |
|                 |                 |                 | Periods         |
+-----------------+-----------------+-----------------+-----------------+
| Total to Period | Year To Date    | YtD             | Total of        |
|                 |                 |                 | Periods         |
+-----------------+-----------------+-----------------+-----------------+
| Total of        | Full Year       | FY              | Active Period   |
| Periods         |                 |                 |                 |
+-----------------+-----------------+-----------------+-----------------+
| Selected sim.   | Sim. Months     | Sim             | Total of        |
| Interval        |                 |                 | Periods         |
+-----------------+-----------------+-----------------+-----------------+

*Time Aggregation Display – Properties and sub properties*

10. Now assign the Navigational Panel VDT_NAV_1 for Value Driver Tree
    VDT_1 as shown in the Outline Panel (see Figure below).

.. figure:: _static/10.82.png
    :align: center
    :alt: alternate text
    
    Outline

11. Navigate to the Standard Properties of the Navigational Panel for
    Value Driver Tree. Set the property Linked Value Driver Tree to the
    Value Driver Tree VDT_1 (see Figure below).

.. figure:: _static/10.83.png
    :align: center
    :alt: alternate text
    
    Standard Properties of Navigational Panel for Value Driver Tree

12. Based on the Standard Properties being configured for the
    Navigational Panel for Value Driver Tree and all the properties
    being configured from Tree, Settings and Data Tabs, you will be able
    to view the entire Tree with Parent Node and Child Nodes as shown
    below.

.. figure:: _static/10.84.png
    :align: center
    :alt: alternate text
    
    Value Driver Tree with Navigational Panel

Additional Properties of Data Tab
---------------------------------

+-----------------------+-----------------------+-----------------------+
| **Area**              | **Property**          | **Description**       |
+=======================+=======================+=======================+
| Result Set            | Bound Data Result Set | This property sets    |
|                       |                       | the Bound Data Result |
|                       |                       | Set.                  |
+-----------------------+-----------------------+-----------------------+
|                       | Input Query Merger    | This property sets    |
|                       | Ref                   | the Input Query       |
|                       |                       | Merger Reference.     |
+-----------------------+-----------------------+-----------------------+
| Node Mapping          | Node Mapping Field    | This property sets    |
|                       |                       | the Node Mapping      |
|                       |                       | Field. The options    |
|                       |                       | are Automatic based   |
|                       |                       | on text, Automatic    |
|                       |                       | based on key and      |
|                       |                       | Manual for Node in    |
|                       |                       | Tree Configuration.   |
+-----------------------+-----------------------+-----------------------+
|                       | Node ID Separator     | This property sets    |
|                       |                       | the Node ID           |
|                       |                       | Separator.            |
+-----------------------+-----------------------+-----------------------+
|                       | Use Manual Data as    | This property can be  |
|                       | defaults if sourced   | enabled/disabled      |
|                       | nodes not available   | based on the choice.  |
|                       | in result set         |                       |
+-----------------------+-----------------------+-----------------------+
| Data Series           | with Comparison data  | This property         |
|                       | series                | enables/disables the  |
|                       |                       | option for Comparison |
|                       |                       | data series.          |
+-----------------------+-----------------------+-----------------------+
|                       | Data series labels -  | This property sets    |
|                       | Primary               | the Primary Data for  |
|                       |                       | the Data series       |
|                       |                       | labels.               |
+-----------------------+-----------------------+-----------------------+
|                       | Data series labels –  | This property sets    |
|                       | Comparison            | the Comparison Data   |
|                       |                       | for the Data series   |
|                       |                       | labels.               |
+-----------------------+-----------------------+-----------------------+
|                       | Periods per data      | This property sets    |
|                       | series                | the Periods per data  |
|                       |                       | series.               |
+-----------------------+-----------------------+-----------------------+
|                       | Period labels         | This property sets    |
|                       |                       | the Periods labels    |
|                       |                       | for the data series.  |
+-----------------------+-----------------------+-----------------------+
| Time Aggregation      | Active Period - Label | This property sets    |
| Display               |                       | the Label for the     |
|                       |                       | Active Period.        |
+-----------------------+-----------------------+-----------------------+
|                       | Active Period - 3     | This property sets    |
|                       | letter Abbreviation   | the 3 letter          |
|                       |                       | Abbreviation for the  |
|                       |                       | Active Period.        |
+-----------------------+-----------------------+-----------------------+
|                       | Active Period -       | This property sets    |
|                       | Secondary Value when  | the Secondary Value   |
|                       | displayed             | for the Active        |
|                       |                       | Period.               |
+-----------------------+-----------------------+-----------------------+
|                       | Total to Period -     | This property sets    |
|                       | Label                 | the Label for the     |
|                       |                       | Total to Period.      |
+-----------------------+-----------------------+-----------------------+
|                       | Total to Period - 3   | This property sets    |
|                       | letter Abbreviation   | the 3 letter          |
|                       |                       | Abbreviation for the  |
|                       |                       | Total to Period.      |
+-----------------------+-----------------------+-----------------------+
|                       | Total to Period -     | This property sets    |
|                       | Secondary Value when  | the Secondary Value   |
|                       | displayed             | for the Total to      |
|                       |                       | Period.               |
+-----------------------+-----------------------+-----------------------+
|                       | Total of Periods -    | This property sets    |
|                       | Label                 | the Label for the     |
|                       |                       | Total of Periods.     |
+-----------------------+-----------------------+-----------------------+
|                       | Total of Periods - 3  | This property sets    |
|                       | letter Abbreviation   | the 3 letter          |
|                       |                       | Abbreviation for the  |
|                       |                       | Total of Periods.     |
+-----------------------+-----------------------+-----------------------+
|                       | Total of Periods -    | This property sets    |
|                       | Secondary Value when  | the Secondary Value   |
|                       | displayed             | for the Total of      |
|                       |                       | Periods.              |
+-----------------------+-----------------------+-----------------------+
|                       | Selected sim.         | This property sets    |
|                       | Interval - Label      | the Label for the     |
|                       |                       | Selected Simulation   |
|                       |                       | Interval.             |
+-----------------------+-----------------------+-----------------------+
|                       | Selected sim.         | This property sets    |
|                       | Interval - 3 letter   | the 3 letter          |
|                       | Abbreviation          | Abbreviation for the  |
|                       |                       | Selected Simulation   |
|                       |                       | Interval.             |
+-----------------------+-----------------------+-----------------------+
|                       | Selected sim.         | This property sets    |
|                       | Interval - Secondary  | the Secondary Value   |
|                       | Value when displayed  | for the Selected      |
|                       |                       | Simulation Interval.  |
+-----------------------+-----------------------+-----------------------+

*Data Tab*

Scripting Functions in VDT Component
------------------------------------

Below you will find the list of common scripting functions for the VDT
Component.

+-----------------------------------+-----------------------------------+
| **Function/Method**               | **Description**                   |
+===================================+===================================+
| As(type)                          | This Function casts the component |
|                                   | to the specified type. If the     |
|                                   | component is of the specified     |
|                                   | type then it is returned as an    |
|                                   | object of the specified type. If  |
|                                   | it is not of the specified type,  |
|                                   | then undefined is returned.       |
+-----------------------------------+-----------------------------------+
| CreateScenario(title)             | This Function creates a new       |
|                                   | Scenario and make it the active   |
|                                   | scenario.                         |
+-----------------------------------+-----------------------------------+
| DeleteAllScenarios()              | This Function deletes all         |
|                                   | scenarios.                        |
+-----------------------------------+-----------------------------------+
| DeleteScenario(name)              | This Function deletes the         |
|                                   | Scenario with the unique name     |
|                                   | from the scenario collection. If  |
|                                   | the scenario to be deleted is the |
|                                   | active scenario, the subsequent   |
|                                   | scenario is set as the active     |
|                                   | scenario. There is always one     |
|                                   | scenario. You are not able to     |
|                                   | delete it if it is the last one.  |
+-----------------------------------+-----------------------------------+
| DisablePeriods()                  | This Function restricts **n**     |
|                                   | number of periods from the        |
|                                   | simulation.                       |
+-----------------------------------+-----------------------------------+
| EnableEditMode(isEditModeEnabled) | This Function enables or disables |
|                                   | the Edit Mode feature.            |
+-----------------------------------+-----------------------------------+
| EnableNodeSimulation(nodeIds,     | This Function enables or disables |
| value)                            | Node Simulation.                  |
+-----------------------------------+-----------------------------------+
| ExportToExel()                    | This Function exports to Excel.   |
+-----------------------------------+-----------------------------------+
| GetActiveScenario()               | This Function retrieves Active    |
|                                   | Scenario Id.                      |
+-----------------------------------+-----------------------------------+
| GetBottomMargin()                 | This Function returns the bottom  |
|                                   | margin of the component.          |
+-----------------------------------+-----------------------------------+
| GetCSSClass()                     | This Function returns the         |
|                                   | Cascading Style Sheet (CSS) class |
|                                   | name of the component.            |
+-----------------------------------+-----------------------------------+
| GetClickedPeriod()                | This Function gets the Selected   |
|                                   | Period in on Click Event.         |
+-----------------------------------+-----------------------------------+
| GetComparisonVersionTitle()       | This Function gets the title for  |
|                                   | comparison version.               |
+-----------------------------------+-----------------------------------+
| GetDataSource()                   | This Function returns the         |
|                                   | assigned data source.             |
+-----------------------------------+-----------------------------------+
| GetExportUrl()                    | This Function gets the Export     |
|                                   | URL.                              |
+-----------------------------------+-----------------------------------+
| GetHeight()                       | This Function returns the height  |
|                                   | of the component.                 |
+-----------------------------------+-----------------------------------+
| GetLeftMargin()                   | This Function returns the left    |
|                                   | margin of the component.          |
+-----------------------------------+-----------------------------------+
| GetName()                         | This Function returns the         |
|                                   | component name. The name is       |
|                                   | unique in an application or       |
|                                   | composite, but not in the running |
|                                   | state when an application         |
|                                   | contains composite instances.     |
+-----------------------------------+-----------------------------------+
| GetNodeData(nodes)                | This Function gets the data for   |
|                                   | the nodes. If node ids are not    |
|                                   | specified then all the nodes will |
|                                   | be exported.                      |
+-----------------------------------+-----------------------------------+
| GetPeriodColumn()                 | This Function gets the Period     |
|                                   | Column.                           |
+-----------------------------------+-----------------------------------+
| GetPeriodToColumn()               | This Function gets the End Period |
|                                   | Column for simulation.            |
+-----------------------------------+-----------------------------------+
| GetPeriods()                      | This Function returns the number  |
|                                   | of periods per data series.       |
+-----------------------------------+-----------------------------------+
| GetPeriodsLabels()                | This Function gets the Period     |
|                                   | Labels.                           |
+-----------------------------------+-----------------------------------+
| GetPrimaryDisplayValue()          | This Function gets whether        |
|                                   | Selected Period or Full total is  |
|                                   | displayed as the primary value on |
|                                   | nodes.                            |
+-----------------------------------+-----------------------------------+
| GetPrimaryVersionTitle()          | This Function gets the title for  |
|                                   | primary version.                  |
+-----------------------------------+-----------------------------------+
| GetRightMargin()                  | This Function returns the right   |
|                                   | margin of the component.          |
+-----------------------------------+-----------------------------------+
| GetScale()                        | This Function gets the Scaling    |
|                                   | for auto scale nodes.             |
+-----------------------------------+-----------------------------------+
| GetSelectedNode()                 | This Function gets the Selected   |
|                                   | Node.                             |
+-----------------------------------+-----------------------------------+
| GetSourceRef()                    | This Function gets Referenced     |
|                                   | Input Data Source Merger.         |
+-----------------------------------+-----------------------------------+
| GetTopMargin()                    | This Function returns the top     |
|                                   | margin of the component.          |
+-----------------------------------+-----------------------------------+
| GetTopNode()                      | This Function gets the Top Node.  |
+-----------------------------------+-----------------------------------+
| GetWidth()                        | This Function returns the width   |
|                                   | of the component.                 |
+-----------------------------------+-----------------------------------+
| GetconfigServerMap(clientURL)     | This Function gets the external   |
|                                   | configuration Map URL.            |
+-----------------------------------+-----------------------------------+
| HideLoadingState()                | This Function hides the loading   |
|                                   | indicator on the component.       |
+-----------------------------------+-----------------------------------+
| IsEditModeEnabled()               | This Function returns whether the |
|                                   | Edit Mode feature is enabled or   |
|                                   | disabled.                         |
+-----------------------------------+-----------------------------------+
| IsVisible()                       | This Function returns whether the |
|                                   | component is visible.             |
+-----------------------------------+-----------------------------------+
| NodesToExport(nodes)              | This Function specifies the nodes |
|                                   | to be exported. If node ids are   |
|                                   | not specified then all the nodes  |
|                                   | will be exported.                 |
+-----------------------------------+-----------------------------------+
| SetActiveDimensionalNodeData(dime | This Function sets the active     |
| nsionalNode,                      | Dimensional Node Config.          |
| vdt, node)                        |                                   |
+-----------------------------------+-----------------------------------+
| SetBottomMargin(bottomMargin)     | This Function sets the bottom     |
|                                   | margin of the component.          |
+-----------------------------------+-----------------------------------+
| SetCSSClass(className)            | This Function sets the Cascading  |
|                                   | Style Sheet (CSS) class name of   |
|                                   | the component.                    |
+-----------------------------------+-----------------------------------+
| SetComparisonVersionTitle(title)  | This Function sets the Title to   |
|                                   | be shown for comparison version.  |
|                                   | Often the title of a variable     |
|                                   | such as Budget 18.                |
+-----------------------------------+-----------------------------------+
| SetConfigServerMap(clientURL,     | This Function sets the external   |
| serverURL)                        | configuration URL (expert         |
|                                   | function), sets the target url    |
|                                   | called to retrieve external       |
|                                   | configuration when this mode is   |
|                                   | selected. The URL can be a        |
|                                   | relative or fully qualified URL.  |
|                                   | Sometimes, you may want to parse  |
|                                   | parameters to the url such as     |
|                                   | user selected or dynamically      |
|                                   | parsed parameters. These can be   |
|                                   | added to the URL and parsed to    |
|                                   | the receiving server as part of   |
|                                   | the query string.                 |
+-----------------------------------+-----------------------------------+
| SetDataSource(dataSourceAlias)    | This Function assigns a data      |
|                                   | source.                           |
+-----------------------------------+-----------------------------------+
| SetExportUrl(url)                 | This Function sets the target url |
|                                   | called on export event if URL is  |
|                                   | chosen as the export mode. The    |
|                                   | URL can be a relative or fully    |
|                                   | qualified URL. Sometimes, you may |
|                                   | want to parse parameters to the   |
|                                   | url such as user selected or      |
|                                   | dynamically parsed parameters.    |
|                                   | These can be added to the URL and |
|                                   | parsed to the receiving server as |
|                                   | part of the query string.         |
+-----------------------------------+-----------------------------------+
| SetFocusNode(nodeName)            | This Function sets the Focus to a |
|                                   | specific node.                    |
+-----------------------------------+-----------------------------------+
| SetHeight(height)                 | This Function sets the height of  |
|                                   | the component.                    |
+-----------------------------------+-----------------------------------+
| SetLeftMargin(leftMargin)         | This Function sets the left       |
|                                   | margin of the component.          |
+-----------------------------------+-----------------------------------+
| SetNodeStyle(style)               | This Function sets the Node       |
|                                   | Visual Style.                     |
+-----------------------------------+-----------------------------------+
| SetNodeVisualStyle(nodeIds,       | This Function sets the Node       |
| value)                            | Visual Style : Normal -> 'N',     |
|                                   | Derived -> 'D', Hidden -> 'H'     |
+-----------------------------------+-----------------------------------+
| SetPeriodColumn(PeriodColumn)     | This Function sets the Period     |
|                                   | Column.                           |
+-----------------------------------+-----------------------------------+
| SetPeriodToColumn(PeriodColumn)   | This Function sets the End Period |
|                                   | Column for simulation.            |
+-----------------------------------+-----------------------------------+
| SetPeriods(periods)               | This Function sets the Total      |
|                                   | number of periods per data        |
|                                   | series. (i.e. 12 for 12 months).  |
+-----------------------------------+-----------------------------------+
| SetPeriodsLabels()                | This Function sets the Period     |
|                                   | Labels.                           |
+-----------------------------------+-----------------------------------+
| SetPrimaryDisplayValue(primaryDis | This Function sets whether        |
| playValue)                        | selected period value or full     |
|                                   | total value is displayed as       |
|                                   | primary value on nodes.           |
+-----------------------------------+-----------------------------------+
| SetPrimaryVersionTitle(title)     | This Function sets the Title to   |
|                                   | be shown for primary version.     |
|                                   | Often the title of a variable     |
|                                   | such as Forecast 18.              |
+-----------------------------------+-----------------------------------+
| SetRightMargin(rightMargin)       | This Function sets the right      |
|                                   | margin of the component.          |
+-----------------------------------+-----------------------------------+
| SetScale(scale)                   | This Function sets the Scaling    |
|                                   | for auto scale nodes.             |
+-----------------------------------+-----------------------------------+
| SetScenario(name)                 | This Function sets a scenario     |
|                                   | from the scenario collection to   |
|                                   | the active scenario.              |
+-----------------------------------+-----------------------------------+
| SetSourceRef(component_id)        | This Function sets the Input Data |
|                                   | Source Merger.                    |
+-----------------------------------+-----------------------------------+
| SetTimeAggregationLabels(valTextS | This Function sets the Time       |
| per,                              | Aggregation labels and 3 letter   |
| valTextLper, valTextSptd,         | abbreviations.                    |
| valTextLptd, valTextStotal,       |                                   |
| valTextLtotal, valTextSsel,       |                                   |
| valTextLsel)                      |                                   |
+-----------------------------------+-----------------------------------+
| SetTopMargin(topMargin)           | This Function sets the top margin |
|                                   | of the component.                 |
+-----------------------------------+-----------------------------------+
| SetTopNode(nodeName)              | This Function sets the Top Node.  |
+-----------------------------------+-----------------------------------+
| SetVisible(isVisible)             | This Function shows or hides the  |
|                                   | component.                        |
+-----------------------------------+-----------------------------------+
| SetWidth(width)                   | This Function sets the width of   |
|                                   | the component.                    |
+-----------------------------------+-----------------------------------+
| ShowCompareScenarios(topNode,     | This Function shows the Scenario  |
| assumpTitle, assumpList,          | Comparison Popup. Calling this    |
| kpiTitle, kpiList)                | functions calculates all          |
|                                   | scenarios in the collection and   |
|                                   | shows a popup comparison view.    |
+-----------------------------------+-----------------------------------+
| ShowComponent(component)          | This Function shows the           |
|                                   | Component.                        |
+-----------------------------------+-----------------------------------+
| ShowDetail(nodeName)              | This Function shows the Detail    |
|                                   | Panel.                            |
+-----------------------------------+-----------------------------------+
| ShowEditInputs(assumpList)        | This Function shows the Input     |
|                                   | Edit Popup for the list parsed.   |
|                                   | Calling this functions shows a    |
|                                   | tabular dialog where you can      |
|                                   | maintain the period values for    |
|                                   | the parsed list of Drivers You    |
|                                   | can add nodes to the list by      |
|                                   | adding their technical name. You  |
|                                   | can also add group headings by    |
|                                   | adding a simple text item.        |
+-----------------------------------+-----------------------------------+
| ShowLoadingState(text)            | This Function shows a loading     |
|                                   | indicator on the component.       |
+-----------------------------------+-----------------------------------+
| SimulateNodeManually()            | This Functions allows you to set  |
|                                   | different values manually for     |
|                                   | each simulation period.           |
+-----------------------------------+-----------------------------------+
| SimulateNode()                    | This Functions allows you to set  |
|                                   | the percentage value for all the  |
|                                   | simulation periods.               |
+-----------------------------------+-----------------------------------+

*Scripting Functions for VDT Component*

Scripting for Node Simulation
-----------------------------

As part of the New Release, SimulateNodes() has been included in the scripting part for VDT component.

VDT_1.simulateNodes(["1","9"], ["20","30"]);

For our example, the above given script indicates that the "Node 1: Revenue" is simulated by 20% and the 
"Node 9: Total Cost" is simulated by 30% (see Figure below).

.. figure:: _static/script1.png
    :align: center
    :alt: alternate text
    
    Simulate Nodes

Scripting for Scenario Simulation
---------------------------------

Simulatescenario() has been included in the scripting part for VDT component. 

VDT_1.simulateScenario("2", ["1","9"], ["50","60"]);

For our example, the above given script indicates that for the Scenario 2, the "Node 1: Revenue" is simulated by 50% and the 
"Node 9: Total Cost" is simulated by 60% (see Figure below).

.. figure:: _static/script2.png
    :align: center
    :alt: alternate text
    
    Simulate Scenario 

VDT Navigation Panel Component
------------------------------

The scenario based functionalities of the VDT Navigation Panel has been
explained in the previous Sections (:ref:`Section: Instructions <ins>` to :ref:`Section: Saving and Opening Scenarios <sos>`).

Scripting Functions in VDT Navigation Panel Component
-----------------------------------------------------

Below you will find the list of common scripting functions for the VDT
Navigation Panel Component.

+-----------------------------------+-----------------------------------+
| **Function/Method**               | **Description**                   |
+===================================+===================================+
| ShowEditInputs(assumpList)        | This Function shows the Input     |
|                                   | Edit Popup for the list parsed.   |
|                                   | Calling this functions shows a    |
|                                   | tabular dialog where you can      |
|                                   | maintain the period values for    |
|                                   | the parsed list of Drivers You    |
|                                   | can add nodes to the list by      |
|                                   | adding their technical name. You  |
|                                   | can also add group headings by    |
|                                   | adding a simple text item.        |
+-----------------------------------+-----------------------------------+
| As(type)                          | This Function casts the component |
|                                   | to the specified type. If the     |
|                                   | component is of the specified     |
|                                   | type then it is returned as an    |
|                                   | object of the specified type. If  |
|                                   | it is not of the specified type,  |
|                                   | then undefined is returned.       |
+-----------------------------------+-----------------------------------+
| CreateScenario(title)             | This Function creates a new       |
|                                   | Scenario and make it the active   |
|                                   | scenario.                         |
+-----------------------------------+-----------------------------------+
| DeleteScenario(name)              | This Function deletes the         |
|                                   | Scenario with the unique name     |
|                                   | from the scenario collection. If  |
|                                   | the scenario to be deleted is the |
|                                   | active scenario, the subsequent   |
|                                   | scenario is set as the active     |
|                                   | scenario. There is always one     |
|                                   | scenario. You are not able to     |
|                                   | delete it if it is the last one.  |
+-----------------------------------+-----------------------------------+
| ExportToExel()                    | This Function exports to Excel.   |
+-----------------------------------+-----------------------------------+
| GetAssumpList()                   | This Function gets the            |
|                                   | Assumptions List (The             |
|                                   | list of node id's or Simple text  |
|                                   | for inline headers).              |
+-----------------------------------+-----------------------------------+
| GetAssumpTitle()                  | This Function gets the            |
|                                   | Assumptions Section Title.        |
+-----------------------------------+-----------------------------------+
| GetAssumpVisibility()             | This Function gets the            |
|                                   | Assumptions Section visibility.   |
+-----------------------------------+-----------------------------------+
| GetBottomMargin()                 | This Function returns the bottom  |
|                                   | margin of the component.          |
+-----------------------------------+-----------------------------------+
| GetCSSClass()                     | This Function returns the         |
|                                   | Cascading Style Sheet (CSS) class |
|                                   | name of the component.            |
+-----------------------------------+-----------------------------------+
| GetConstraintsList()              | This Function gets the            |
|                                   | Constraints List (List of node    |
|                                   | id's or Simple text for inline    |
|                                   | headers).                         |
+-----------------------------------+-----------------------------------+
| GetConstraintsTitle()             | This Function gets the            |
|                                   | Constraints Section Title.        |
+-----------------------------------+-----------------------------------+
| GetConstraintsVisibility()        | This Function gets the            |
|                                   | Constraints Section visibility.   |
+-----------------------------------+-----------------------------------+
| GetFilterLists()                  | This Function gets the Filter     |
|                                   | Lists.                            |
+-----------------------------------+-----------------------------------+
| GetHeight()                       | This Function returns the height  |
|                                   | of the component.                 |
+-----------------------------------+-----------------------------------+
| GetKPIList()                      | This Function gets the KPI's List |
|                                   | (List of node id's or Simple text |
|                                   | for inline headers).              |
+-----------------------------------+-----------------------------------+
| GetKPITitle()                     | This Function gets the KPI's      |
|                                   | Section Title.                    |
+-----------------------------------+-----------------------------------+
| GetKPIVisibility()                | This Function gets the KPI's      |
|                                   | Section visibility.               |
+-----------------------------------+-----------------------------------+
| GetLeftMargin()                   | This Function returns the left    |
|                                   | margin of the component.          |
+-----------------------------------+-----------------------------------+
| GetName()                         | This Function returns the         |
|                                   | component name. The name is       |
|                                   | unique in an application or       |
|                                   | composite, but not in the running |
|                                   | state when an application         |
|                                   | contains composite instances.     |
+-----------------------------------+-----------------------------------+
| GetPeriodsTitle()                 | This Function gets the Simulation |
|                                   | Period Section Title.             |
+-----------------------------------+-----------------------------------+
| GetPeriodsVisibility()            | This Function gets the Simulation |
|                                   | Period Section visibility.        |
+-----------------------------------+-----------------------------------+
| GetRightMargin()                  | This Function returns the right   |
|                                   | margin of the component.          |
+-----------------------------------+-----------------------------------+
| GetScalesList()                   | This Function gets the Selectable |
|                                   | Scales List (List of selectable   |
|                                   | scales currently configured).     |
+-----------------------------------+-----------------------------------+
| GetScenariosTitle()               | This Function gets the Scenarios  |
|                                   | Section Title.                    |
+-----------------------------------+-----------------------------------+
| SetScenariosVisibility(visibility | This Function sets the Scenarios  |
| )                                 | Section visibility. Calling this  |
|                                   | functions, you can set the        |
|                                   | section visibility.               |
+-----------------------------------+-----------------------------------+
| SetShowTitles(show)               | This Function sets the Display    |
|                                   | Section Headers. Calling this     |
|                                   | functions, you can change the     |
|                                   | display of section headers.       |
+-----------------------------------+-----------------------------------+
| SetTopMargin(topMargin)           | This Function sets the top margin |
|                                   | of the component.                 |
+-----------------------------------+-----------------------------------+
| SetTopNode(nodeName)              | This Function sets the Top Node.  |
+-----------------------------------+-----------------------------------+
| SetTopNodesList(list)             | This Function sets the Top Nodes  |
|                                   | List. Calling this functions, you |
|                                   | can set the selectable top node   |
|                                   | list for the panel You can add    |
|                                   | nodes to the list by adding their |
|                                   | technical name. You can also add  |
|                                   | group headings by adding a simple |
|                                   | text item.                        |
+-----------------------------------+-----------------------------------+
| SetTopNodesTitle(title)           | This Function sets the Top Nodes  |
|                                   | Section Title. Calling this       |
|                                   | functions, you can set the        |
|                                   | section header title.             |
+-----------------------------------+-----------------------------------+
| SetTopNodesVisibility(visibility) | This Function sets the Top Nodes  |
|                                   | Section visibility. Calling this  |
|                                   | functions, you can set the        |
|                                   | section visibility.               |
+-----------------------------------+-----------------------------------+
| SetValueDisplayList(list)         | This Function sets the Selectable |
|                                   | Primary Value Displays. Calling   |
|                                   | this functions, you can set the   |
|                                   | list of Primary Time Aggregations |
|                                   | that users can select. Must be    |
|                                   | from the following list: 'per',   |
|                                   | 'ptd', 'total', 'sel'.            |
+-----------------------------------+-----------------------------------+
| SetValueDisplayTitle(title)       | This Function sets the Value      |
|                                   | Display Section Title. Calling    |
|                                   | this functions, you can set the   |
|                                   | section header title.             |
+-----------------------------------+-----------------------------------+
| SetValueDisplayVisibility(visibil | This Function sets the Value      |
| ity)                              | Display Section visibility.       |
|                                   | Calling this functions, you can   |
|                                   | set the section visibility.       |
+-----------------------------------+-----------------------------------+
| SetValueDriverTree(component_id)  | This Function sets the Linked     |
|                                   | Value Driver Tree. Calling this   |
|                                   | functions, you can change the     |
|                                   | linked value driver tree.         |
+-----------------------------------+-----------------------------------+
| SetVisible(isVisible)             | This Function shows or hides the  |
|                                   | component.                        |
+-----------------------------------+-----------------------------------+
| SetVisualStyleList(list)          | This Function sets the Selectable |
|                                   | Visual Style. Calling this        |
|                                   | functions, you can set the list   |
|                                   | of Visual Styles that users can   |
|                                   | select. Must be from the          |
|                                   | following list: 'S'=Standard,     |
|                                   | 'F'=Full, 'M',=Minimal.           |
+-----------------------------------+-----------------------------------+
| SetVisualization(style)           | This Function sets the Node       |
|                                   | Visual Style.                     |
+-----------------------------------+-----------------------------------+
| SetVisualizationStyle(style)      | This Function sets the Node       |
|                                   | Visual Style.                     |
+-----------------------------------+-----------------------------------+
| SetWidth(int width)               | This Function sets the width of   |
|                                   | the component.                    |
+-----------------------------------+-----------------------------------+
| ShowCompareScenarios(topNode,     | This Function shows the Scenario  |
| assumpTitle, assumpList,          | Comparison Popup for the list     |
| kpiTitle, kpiList)                | parsed. Calling this functions    |
|                                   | calculates all scenarios in the   |
|                                   | collection and shows a popup      |
|                                   | comparison view. The lines in the |
|                                   | comparison report is defined by   |
|                                   | the list parsed as an input. You  |
|                                   | can add nodes to the list by      |
|                                   | adding their technical name. You  |
|                                   | can also add group headings by    |
|                                   | adding a simple text item.        |
+-----------------------------------+-----------------------------------+
| ShowLoadingState(text)            | This Function shows a loading     |
|                                   | indicator on the component.       |
+-----------------------------------+-----------------------------------+

*Scripting Functions for VDT Navigation Panel Component*

Value Driver Tree result as Data Source
=======================================

As part of valQ Release 2.0.5, the simulation result can be consumed in
the dashboard in the form of “Value Driver Tree Output Data Source” and
configures the component to get values for desired nodes.

.. figure:: _static/11.1.png
    :align: center
    :alt: alternate text
    
    Value Driver Tree Output Data Source

The “Value Driver Tree Output Data Source” component should be
associated with a “Value Driver Component” using the property “Linked
Value Driver Tree”.

In the Standard Properties, provide the ID of the nodes whose data that
should be available in the Data Source in the property “KPI’s and
Drivers to be exported”

.. figure:: _static/11.2.png
    :align: center
    :alt: alternate text
    
    Standard Properties

Excel as Data Source
====================

As part of valQ Release 2.0.5, you will be able to use Excel Sheet as
Data Source. For our example, we have assigned Google Spreadsheet and it
exists in the below format.

.. figure:: _static/12.1.png
    :align: center
    :alt: alternate text
    
    Sample Excel Data Source

**Note:** In the above Google Spreadsheet example, the index starts from
zero.

In the Outline panel, set the Custom Data Source as the XLS Data Source
(assuming that the above sample excel data source is being assigned) as
shown in the Figure below.

.. figure:: _static/12.2.png
    :align: center
    :alt: alternate text
    
    Outline

Now navigate to the category General and to the sub category General
Settings of the Custom Data Source. Now set the property Type of
Spreadsheet to the option Google Spreadsheet and set the File Location
(see Figure below).

.. figure:: _static/12.3.png
    :align: center
    :alt: alternate text
    
    Category General and Sub category General Settings

Now navigate to the category General and to the sub category Advanced
Settings of the Custom Data Source. For our example, activate the
property Enable Column Dimensions. Set the property First Data Cell
Column Index to the value 1, First Data Cell Row Index to the value 2
and Measure Index in Column to the value 2 (Here for the Measure, the
index starts from the value 1. The dashboard will be displayed with the
data assigned from the Google Spreadsheet.

.. figure:: _static/12.4.png
    :align: center
    :alt: alternate text
    
    Category General and Sub category Advanced Settings

CSV Data Source
===============

As part of valQ Release 3.0, you will be able to use CSV Data Source for
the Value Driver Tree as part of the Data Source configuration.

The below steps explains on how to configure the CSV Data Source for the
Value Driver Tree.

1. Create a new project in SAP Lumira Designer.

2. For our example, create a Layout as shown in the below Figure.

.. figure:: _static/13.1.png
    :align: center
    :alt: alternate text
    
    Layout

3. Assign the VDT Component to the Layout as in the Figure above.

4. Now assign the Custom Data Source by navigating to the Data Source •
   Add Custom Source •

VDT CSVDataSource (see Figure below).

.. figure:: _static/13.2.png
    :align: center
    :alt: alternate text
    
    Assigning VDT CSV Data Source

5. Now the Layout looks similar to the Figure shown below.

.. figure:: _static/13.3.png
    :align: center
    :alt: alternate text
    
    Assigned VDT CSV Data Source

6. Now navigate to the Standard Properties of the VDT CSV Data Source
   (see Figure below).

.. _SP:

.. figure:: _static/13.4.png
    :align: center
    :alt: alternate text
    
    Standard Properties of the VDT CSV Data Source

7. For our example, set the property Google Spread Sheet URL to the
   respective URL Link based on our choice and the sample Data Source
   will be similar to the data shown below.

.. figure:: _static/13.5.png
    :align: center
    :alt: alternate text
    
    Sample CSV Data Source

8.  Set the property Measure Index in Column to the value 1 (:ref:`See Figure: Standard Properties of the VDT CSV Data Source <SP>`).

9.  Set the property Measure First Data Cell Column Index to the value 2
    (:ref:`See Figure: Standard Properties of the VDT CSV Data Source <SP>`). 

10. Set the property Measure First Data Cell Row Index to the value 2
    (:ref:`See Figure: Standard Properties of the VDT CSV Data Source <SP>`). 

11. Set the property Has Column Dimension Name to the option True (:ref:`See Figure: Standard Properties of the VDT CSV Data Source <SP>`).

12. Set the property Has Row Dimension Name to the option False (:ref:`See Figure: Standard Properties of the VDT CSV Data Source <SP>`).

13. Now assign the VDT CSV Data Source to the VDT Component (:ref:`See Figure: Standard Properties of the VDT CSV Data Source <SP>`).

.. figure:: _static/13.6.png
    :align: center
    :alt: alternate text
    
    VDT CSV Data Source assigned to VDT Component

14. Now you will be able to view the VDT in Run time with the Nodes
    having the values based on the Data Source as shown in step 7. (see
    Figure below).

.. figure:: _static/13.7.png
    :align: center
    :alt: alternate text
    
    VDT with Nodes having the CSV Data Source values

**Note**: If the Calc. Method in the Tree Tab is selected as “Data
Source” option then the VDT can be visualized based on the assigned Data
Source. If the Calc. Method is selected as “Manual” or if there is no
Data Source, then the VDT can be visualized based on the Primary and
Comparison Data.

Edit Scenario and Description
=============================

As part of valQ Release 2.0.5, by clicking the Pencil icon in the
Navigation Panel, Edit Scenario window will get displayed allowing the
user to edit the “Scenario Title” and “Scenario Description”.

By default, the “Scenario Description” will be populated based on the
simulation executed in the application.

When the user manually enters the comment in the “Scenario Description”
then the auto populated simulation message will not get displayed
further but the user entered text can be edited at any point of time
(see Figure below).

.. figure:: _static/14.1.png
    :align: center
    :alt: alternate text
    
    Edit Scenario Window

Edit Description
****************

As part of the New Release, you will be able to select the contents from the “Simulation” part by navigating to the Edit Description option of both the Scenario and the Initiative.

.. figure:: _static/ed1.png
    :align: center
    :alt: alternate text 

    Edit Description

Export Config
=============

As part of valQ Release 2.0.5, after the dashboard completes loading,
press “Ctrl + Alt + Shift + C” key combination to download configuration
file related to VDT and Navigation Panel (see Figure below).

.. figure:: _static/15.1.png
    :align: center
    :alt: alternate text
    
    Downloading Configuration File

After the dashboard completes loading, use “Ctrl + Alt + Shift + N” key
combination to download Node Snapshot (see Figure below).

.. figure:: _static/15.2.png
    :align: center
    :alt: alternate text
    
    Downloading Node Snapshot

Detail Page Component
=====================

As part of valQ Release 3.0, a new Detail Page Component has been
included which is used to show a Custom Detail Page in the Run time
instead of the Standard Page.

The steps below explains on how you will be able to create the Custom
Detail Page Component in VDT:

1. For our example, create a layout in SAP Lumira Designer by assigning
   the Detail Page Component as shown in the below Figure.

.. figure:: _static/16.1.png
    :align: center
    :alt: alternate text
    
    Layout

2. Now navigate to the Settings Tab of the Value Driver Tree. In the
   area Events, set the property Default Action to the option Show
   Custom Detail Pop up (see Figure below).

.. figure:: _static/16.2.png
    :align: center
    :alt: alternate text
    
    Settings Tab - Events

3. Set the property Custom Detail PopUp Reference to the Detail Page as
   “DETAILPAGE_1”.

4. Navigate to the Additional Properties of the DETAILPAGE Component
   (see Figure below).

.. figure:: _static/16.3.png
    :align: center
    :alt: alternate text
    
    General Tab

5. In the General Tab, the property Default Visible is not activated in
   our example.

6. Set the property Linked Value Driver Tree to the Value Driver Tree as
   “VDT_1”.

7. Set the property Bind To the option Active Node.

8. Navigate to the Layout Tab as shown in the below Figure.

.. figure:: _static/16.4.png
    :align: center
    :alt: alternate text
    
    Layout Tab

9.  In the Layout Tab, create four containers and assign the container
    components as shown in the above Figure.

10. Navigate to the Responsive Settings Tab. Now you can observe the
    responsive settings of the Containers and their components (see
    Figure below).

.. figure:: _static/16.5.png
    :align: center
    :alt: alternate text
    
    Responsive Settings Tab

11. In the Run time you will be able to view the configured Tree with
    Nodes as shown in the below Figure.

.. figure:: _static/16.6.png
    :align: center
    :alt: alternate text
    
    Simulated Node

12. For our example, you have simulated the Node as indicated in the
    above Figure. Now when you click that Node in the Runtime, you will
    be able to observe that a Custom Detail page for the Node will be
    displayed. The Custom Detail Page will be displayed based on the
    Layout being assigned with the containers (see Figure below).

.. figure:: _static/16.7.png
    :align: center
    :alt: alternate text
    
    Custom Detail Page

It is to be noted that you can also use the SAP custom component in the
Detail Page VDT component as shown in the below Layout (see Figure
below).

.. figure:: _static/16.8.png
    :align: center
    :alt: alternate text
    
    Layout Tab

In our example, the native SAP component column bar chart has been
assigned to the container 3 in the Figure shown above. In the Lumira
Designer, the layout based on our example will be viewed as shown below.

.. figure:: _static/16.9.png
    :align: center
    :alt: alternate text
    
    Lumira Designer Layout

Based on the configuration, you will be able to view the Custom Detail
Page with the column bar chart being assigned as Component Reference
(see Figure below).

.. figure:: _static/16.10.png
    :align: center
    :alt: alternate text
    
    Detail Page Component with Component Reference

Additional Properties of Detail Page Component
----------------------------------------------

+-----------------------+-----------------------+-----------------------+
| **Tab**               | **Property**          | **Description**       |
+=======================+=======================+=======================+
| General               | Default Visible       | By enabling this      |
|                       |                       | property, the         |
|                       |                       | component will be     |
|                       |                       | visible by default    |
|                       |                       | otherwise the         |
|                       |                       | component will be     |
|                       |                       | hidden and it will be |
|                       |                       | visible only when     |
|                       |                       | some event is         |
|                       |                       | triggered.            |
+-----------------------+-----------------------+-----------------------+
|                       | Linked Value Driver   | This property sets    |
|                       | Tree                  | the Value Driver Tree |
|                       |                       | that links the Detail |
|                       |                       | Page.                 |
+-----------------------+-----------------------+-----------------------+
|                       | Bind To               | This property sets    |
|                       |                       | the Node from the     |
|                       |                       | Linked VDT that       |
|                       |                       | should be bound to    |
|                       |                       | the Detail Page.      |
+-----------------------+-----------------------+-----------------------+

*Detail Page Component*

Single Data Series
==================

As part of valQ Release 3.0, you will be able to configure the VDT Tree
with the different set of Data Series options as listed below:

-  Primary Data Series only

-  Primary Data Series with Comparison Data Series

-  Single Data Point

-  Single Data Point with Comparison

The following sections will explain the four different configurations
implemented for the Data Series Feature in VDT Tree.


.. _pds:

Primary Data Series 
--------------------

The steps below explains on how you will be able to configure the
Primary Data Series in VDT:

1. For our example, create a layout in SAP Lumira Designer as shown in
   the below Figure.

.. figure:: _static/17.1.png
    :align: center
    :alt: alternate text
    
    Layout

2. For our example, a Grid Layout has been created with two cells having
   one cell assigned with the VDT Tree and the other cell assigned with
   VDT Navigation Panel (see Figure above).

3. Navigate to the Additional Properties of the Value Driver Tree and
   create a VDT Tree with the Parent Node labelled as “Sum” and two
   Child Nodes “Value A” and “Value B” as shown in the below Figure.

.. figure:: _static/17.2.png
    :align: center
    :alt: alternate text
    
    Properties Sheet for Node Value A

4. Now navigate to the Properties Sheet for the Node “Value A”. In the
   area Calculation, set the property Calc. Method to the option Manual.

5. Set the Primary Data to the value [100, 100, 100, 100, 100, 100, 100,
   100, 100, 100, 100, 100].

6. Set the property Time Aggregation to the option Sum of Periods.

7. Now navigate to the Properties Sheet for the Node “Value B”. In the
   area Calculation, set the property Calc. Method to the option Manual
   (see Figure below).

.. figure:: _static/17.3.png
    :align: center
    :alt: alternate text
    
    Properties Sheet for Node Value B

8.  Set the Primary Data to the value [200, 200, 200, 200, 200, 200,
    200, 200, 200, 200, 200, 200].

9.  Set the property Time Aggregation to the option Sum of Periods.

10. Navigate to the Settings Tab. In the area Initial State, set the
    property Active Period from value 1 to value 12 as shown in the
    below Figure.

.. figure:: _static/17.4.png
    :align: center
    :alt: alternate text
    
    Settings Tab

11. Based on the above configuration you will be able to view the Value
    Driver Tree with the simulated values as shown in the below Figure.

.. figure:: _static/17.5.png
    :align: center
    :alt: alternate text
    
    Simulated Data at Run time

12. From the above Figure, you can observe that the simulated value for
    Node “Value A” will be 100 for each month where the total value will
    be 1200 for 12 months and the simulated value for Node “Value B”
    will be 200 for each month where the total value will be 2400 for 12
    months. The Parent Node “Sum” indicates the sum of the Primary
    values for Nodes Value A and Value B which is 1200+2400 3600.

Primary Data Series with Comparison Data Series 
------------------------------------------------

The steps below explains on how you will be able to configure the
Primary Data Series with Comparison Data Series in VDT:

1. As an initial step, proceed with the similar set of steps for
   creating the Layout as explained in :ref:`Section: Primary Data Series <pds>`.

2. In this scenario consider that you have only one Node “Value A” with
   both the Primary and Comparison Data (see Figure below).

.. figure:: _static/17.6.png
    :align: center
    :alt: alternate text
    
    Properties Sheet for Node Value A

3. Navigate to the Additional Properties of the Tree Tab and to the area
   Calculation as shown in the Figure above.

4. For our example, set the property Calc. Method to the option Manual.

5. Set the Primary Data to the value [100, 100, 100, 100, 100, 100, 100,
   100, 100, 100, 100, 100].

6. Set the Comparison Data to the value [200, 200, 200, 200, 200, 200,
   200, 200, 200, 200, 200, 200].

7. Set the property Time Aggregation to the option Sum of Periods.

8. Navigate to the Settings Tab. In the area Initial State, set the
   property Active Period from value 1 to value 12 as shown in the below
   Figure.

.. figure:: _static/17.7.png
    :align: center
    :alt: alternate text
    
    Settings Tab

9. Based on the above configuration you will be able to view the Value
   Driver Tree with the simulated values as shown in the below Figure.

.. figure:: _static/17.8.png
    :align: center
    :alt: alternate text
    
    Simulated Data at Run time

13. From the above Figure, you can observe that the simulated value for
    Node “Value A” will be 100 for each month where the total value will
    be 1200 for 12 months. The Parent Node “Sum” indicates the sum of
    the Primary values for Node A which is 1200. You will be able to
    view the Primary value with the comparison value by clicking the
    Edit icon which would lead you the Table view.

Single Data Point
-----------------

The steps below explains on how you will be able to configure the Single
Data Point in VDT:

1. As an initial step, proceed with the similar set of steps for
   creating the Layout as explained in :ref:`Section: Primary Data Series <pds>`.

2. In this scenario consider that you have two Nodes “Value A” and
   “Value B” and a Parent Node “Sum” (see Figure below).

.. figure:: _static/17.9.png
    :align: center
    :alt: alternate text
    
    Properties Sheet for Node Value A

3. Now navigate to the Properties Sheet for the Node “Value A”. In the
   area Calculation, set the property Calc. Method to the option Manual.

4. Set the Primary Data to the value [100, 100, 100, 100, 100, 100, 100,
   100, 100, 100, 100, 100].

5. Set the property Time Aggregation to the option Sum of Periods.

6. Now navigate to the Properties Sheet for the Node “Value B”. In the
   area Calculation, set the property Calc. Method to the option Manual
   (see Figure below).

.. figure:: _static/17.10.png
    :align: center
    :alt: alternate text
    
    Properties Sheet for Node Value B

7. Set the Primary Data to the value [200, 200, 200, 200, 200, 200, 200,
   200, 200, 200, 200, 200].

8. Set the property Time Aggregation to the option Sum of Periods.

9. Navigate to the Settings Tab. In the area Initial State, set the
   property Active Period from value 1 to value 1 as shown in the below
   Figure.

.. figure:: _static/17.11.png
    :align: center
    :alt: alternate text
    
    Settings Tab

10. Now navigate to the Data Tab. In the area Data Series, set the
    property Periods per data series to the value 1 and set the property
    Period Labels to the month Jan (see Figure below).

.. figure:: _static/17.12.png
    :align: center
    :alt: alternate text
    
    Data Tab

11. Based on the above configuration you will be able to view the Value
    Driver Tree with the simulated values as shown in the below Figure.

.. figure:: _static/17.13.png
    :align: center
    :alt: alternate text
    
    Simulated Data at Run time

14. From the above Figure, you can observe that the primary value for
    Node “Value A” will be 100 for January month and the Primary value
    for Node “Value B” will be 200 for January month. The total
    simulated value for the Parent Node “Sum” will be the sum of two
    nodes Value A and Value B which is 100+200 300.

Single Data Point with Comparison
---------------------------------

The steps below explains on how you will be able to configure the Single
Data Point with Comparison in VDT:

1. As an initial step, proceed with the similar set of steps for
   creating the Layout as explained in :ref:`Section: Primary Data Series <pds>`.

2. In this scenario consider that you have only one Node “Value A” and a
   Parent Node “Sum” (see Figure below).

.. figure:: _static/17.14.png
    :align: center
    :alt: alternate text
    
    Properties Sheet for Node Value A

4. Navigate to the Additional Properties of the Tree Tab and to the area
   Calculation as shown in the Figure above.

5. For our example, set the property Calc. Method to the option Manual.

6. Set the Primary Data to the value [100, 100, 100, 100, 100, 100, 100,
   100, 100, 100, 100, 100].

7. Set the Comparison Data to the value [200, 200, 200, 200, 200, 200,
   200, 200, 200, 200, 200, 200].

8. Set the property Time Aggregation to the option Sum of Periods.

9. Navigate to the Settings Tab. In the area Initial State, set the
   property Active Period from value 1 to value 1 as shown in the below
   Figure.

.. figure:: _static/17.15.png
    :align: center
    :alt: alternate text
    
    Settings Tab

12. Now navigate to the Data Tab. In the area Data Series, set the
    property Periods per data series to the value 1 and set the property
    Period Labels to the month Jan (see Figure below).

.. _DTB:

.. figure:: _static/17.16.png
    :align: center
    :alt: alternate text
    
    Data Tab

13. Based on the above configuration you will be able to view the Value
    Driver Tree with the simulated values as shown in the below Figure.

.. figure:: _static/17.17.png
    :align: center
    :alt: alternate text
    
    Simulated Data at Run time

15. From the above Figure, you can observe that the Primary value for
    Node “Value A” will be 100 for January month and the Comparison
    value for Node “Value B” will be 200 for January month. The Parent
    Node “Sum” indicates the sum of the Primary value for only Node A
    which is 100 for January month (based on the configuration shown in
    :ref:`Figure: Data Tab <DTB>`). 
    Now you will be able to view the Primary value with
    the comparison value by clicking the Edit icon which would lead you
    the Table view.

Variance Analysis
=================

As part of valQ Release 3.0, a new option Variance Breakdown has been
included in the Run time which shows the complete variance breakdown of
the Calculated Components on the Full Period. For our example you can
observe the current status of the Node Revenue before applying the
Simulation (see Figure below).

.. figure:: _static/18.1.png
    :align: center
    :alt: alternate text
    
    Node Revenue in Run time – Before Simulation

In our example, the current value for Node Revenue is 416.4 and by
clicking the Edit button you will be able to view the Table showing the
Variance Breakdown of calculated components on Full Year. Here you can
observe the variance details for the current value 416.4 against the
original value 459.4 for the Node Revenue (see Figure below).

.. figure:: _static/18.2.png
    :align: center
    :alt: alternate text
    
    Table View on Variance Break before Simulation

After applying the Simulation you can observe that the Node Revenue
value gets increased to 505.7 (see Figure below).

.. figure:: _static/18.3.png
    :align: center
    :alt: alternate text
    
    Node Revenue in Run time – After Simulation

Now by clicking the Edit button in the Node Revenue, you will be able to
view the Table showing the Variance Breakdown of calculated components
on Full Year. Here you can observe the variance details for the
simulated value 505.7 against the original value 459.4 for the Node
Revenue (see Figure below).

.. figure:: _static/18.4.png
    :align: center
    :alt: alternate text
    
    Table View on Variance Break after Simulation

Dynamic Tree from Data Source
=============================

As part of valQ Release 3.0, you will be able to use Hierarchical Data
Source for the Value Driver Tree. Based on the Hierarchical Data Source
assigned the VDT will show the Parent and the Child Nodes in relevance
to the Additional Property settings.

The steps below explains on how you will be able to create the VDT using
the Hierarchical Data Source:

1. For our example, create a layout in SAP Lumira Designer by assigning
   a VDT and a VDT Navigational Panel as shown in the below Figure.

.. figure:: _static/19.1.png
    :align: center
    :alt: alternate text
    
    Layout

2. For our example, assign the Hierarchical data Source as shown in the
   above Figure.

3. Now navigate to the Initial View of the Data Source (see Figure
   below).

.. figure:: _static/19.2.png
    :align: center
    :alt: alternate text
    
    Initial View of the Data Source

4. Now activate the 5 Levels of Hierarchy for the Dimension State as
   shown in the Figure above.

5. Based on the activation of the 5 Levels of Hierarchy, you will be
   able to view the Tree with 5 levels of Hierarchy having “US” as the
   Parent Node (see Figure below).

.. figure:: _static/19.3.png
    :align: center
    :alt: alternate text

    Dynamic Tree 

In the above Figure, you can observe that “1” represents the First Level
of Hierarchy (US – Parent Node), “2” represents the Second Level of
Hierarchy (West, South, North East and Mid West with West as Parent
Node), “3” represents the Third Level of Hierarchy (Arizona, California,
New Mexico, Washington, Georgia and Orgeon with Arizona as Parent Node),
“4” represents the Fourth Level of Hierarchy (CHNDLR, MESA, PHOENX and
TUCSON with CHNDLR as Parent Node) and “5” represents the Fifth Level of
Hierarchy (VBIFS0100 and VBIFS0134).

Known Issues and Limitations
============================

Below are the known issues as of the writing of the document. This list
will be updated in the online version to reflect the current state at
any point in time.

+-----------------------------------+-----------------------------------+
| Pinch zoom is not supported in IE | The Pinch zoom doesn’t work       |
| on Windows touch enabled devices  | within Windows touch interfaces.  |
|                                   | A zoom slider has been added to   |
|                                   | ensure users has access to zoom   |
|                                   | even when                         |
+-----------------------------------+-----------------------------------+
| Value Driver Trees tested up to   | As your tree becomes bigger, the  |
| 1500 nodes in single tree         | most likely challenge becomes     |
|                                   | your data source performance. As  |
|                                   | the data source is not refreshed  |
|                                   | during navigation, this major     |
|                                   | performance impact is however     |
|                                   | only material when you open the   |
|                                   | App. It is a little like opening  |
|                                   | an Excel workbook. As they become |
|                                   | larger, they take longer to load. |
|                                   |                                   |
|                                   | Value Driver Trees are tested up  |
|                                   | to 1500 nodes and calculation,    |
|                                   | visualization and simulation is   |
|                                   | almost instant on all tested      |
|                                   | devices.                          |
|                                   |                                   |
|                                   | We can however not guarantee      |
|                                   | performance beyond our tested     |
|                                   | level. If you have a requirement  |
|                                   | for more than 1500 nodes in a     |
|                                   | single tree, please contact us.   |
+-----------------------------------+-----------------------------------+

*Known Issues and Limitations*

.. |4| image:: _static/image2.jpeg
   :width: 7.08194in
   :height: 3.21875in
.. |image3| image:: _static/image3.png
   :width: 0.16667in
   :height: 0.15625in
.. |4| image:: _static/image4.jpeg
   :width: 5.90625in
   :height: 3.61458in
.. |image5| image:: _static/image5.png
   :width: 0.14583in
   :height: 0.17708in
.. |4| image:: _static/image6.jpeg
   :width: 3.42708in
   :height: 1.26042in
.. |4| image:: _static/image7.jpeg
   :width: 7.08194in
   :height: 4.39514in
.. |image8| image:: _static/image8.png
   :width: 1in
   :height: 0.25in
.. |image9| image:: _static/image9.png
   :width: 1.04167in
   :height: 0.23958in
.. |4| image:: _static/image10.jpeg
   :width: 2.83333in
   :height: 1.10417in
.. |4| image:: _static/image11.jpeg
   :width: 6.01042in
   :height: 3.1875in
.. |image12| image:: _static/image12.png
   :width: 0.25in
   :height: 0.23958in
.. |4| image:: _static/image13.jpeg
   :width: 7.07292in
   :height: 3.27083in
.. |4| image:: _static/image14.jpeg
   :width: 7.08194in
   :height: 3.15556in
.. |4| image:: _static/image15.jpeg
   :width: 7.07292in
   :height: 3.21875in
.. |image16| image:: _static/image12.png
   :width: 0.25in
   :height: 0.23958in
.. |4| image:: _static/image16.jpeg
   :width: 7.08194in
   :height: 3.08264in
.. |4| image:: _static/image17.jpeg
   :width: 2.625in
   :height: 1.625in
.. |4| image:: _static/image18.jpeg
   :width: 7.08194in
   :height: 1.81181in
.. |image20| image:: _static/image19.png
   :width: 0.28125in
   :height: 0.29167in
.. |image21| image:: _static/image20.png
   :width: 0.5625in
   :height: 0.25in
.. |4| image:: _static/image21.jpeg
   :width: 5.35417in
   :height: 3.36458in
.. |image23| image:: _static/image22.png
   :width: 0.1875in
   :height: 0.16667in
.. |image24| image:: _static/image23.png
   :width: 0.16667in
   :height: 0.1875in
.. |4| image:: _static/image24.jpeg
   :width: 7.07292in
   :height: 0.61458in
.. |4| image:: _static/image25.jpeg
   :width: 7.07292in
   :height: 0.59375in
.. |4| image:: _static/image26.jpeg
   :width: 7.07292in
   :height: 0.60417in
.. |image28| image:: _static/image27.png
   :width: 0.21875in
   :height: 0.21875in
.. |image29| image:: _static/image23.png
   :width: 0.16667in
   :height: 0.1875in
.. |4| image:: _static/image28.jpeg
   :width: 2.91667in
   :height: 1.32292in
.. |4| image:: _static/image29.jpeg
   :width: 7.08194in
   :height: 0.95833in
.. |4| image:: _static/image30.jpeg
   :width: 7.08194in
   :height: 2.75972in
.. |image33| image:: _static/image31.png
   :width: 2.19792in
   :height: 0.3125in
.. |image34| image:: _static/image27.png
   :width: 0.21875in
   :height: 0.21875in
.. |image35| image:: _static/image32.png
   :width: 0.21875in
   :height: 0.19792in
.. |4| image:: _static/image33.jpeg
   :width: 6.63542in
   :height: 3.08333in
.. |image37| image:: _static/image34.png
   :width: 0.35417in
   :height: 0.20833in
.. |image38| image:: _static/image35.png
   :width: 0.23958in
   :height: 0.20833in
.. |image39| image:: _static/image36.png
   :width: 1.01042in
   :height: 0.27083in
.. |4| image:: _static/image37.jpeg
   :width: 7.01042in
   :height: 3.38542in
.. |4| image:: _static/image38.jpeg
   :width: 7.07292in
   :height: 2.61458in
.. |4| image:: _static/image39.jpeg
   :width: 3.23958in
   :height: 1.08333in
.. |4| image:: _static/image40.jpeg
   :width: 6.89583in
   :height: 4.33333in
.. |6| image:: _static/image41.jpeg    
   :width: 7.07292in
   :height: 3.65625in   
.. |7| image:: _static/image42.jpeg
   :width: 7.07292in
   :height: 2.89583in
.. |7| image:: _static/image43.jpeg
   :width: 4.09375in
   :height: 1.91667in
.. |7| image:: _static/image44.jpeg
   :width: 5.5625in
   :height: 4.53125in
.. |7| image:: _static/image45.jpeg
   :width: 2.375in
   :height: 0.79167in
.. |image49| image:: _static/image46.png
   :width: 0.19792in
   :height: 0.13542in
.. |7| image:: _static/image47.jpeg
   :width: 2.44792in
   :height: 0.76042in
.. |8| image:: _static/image48.jpeg
   :width: 7.08194in
   :height: 3.98194in
.. |9| image:: _static/image49.jpeg
   :width: 3.02083in
   :height: 1.41667in
.. |9| image:: _static/image50.jpeg
   :width: 2.875in
   :height: 1.57292in
.. |9| image:: _static/image51.jpeg
   :width: 1.79167in
   :height: 1.90625in
.. |outline| image:: _static/image52.jpeg
   :width: 2.5625in
   :height: 2.67708in
.. |image56| image:: _static/image53.png
   :width: 7.08194in
   :height: 2.09306in
.. |image57| image:: _static/image54.png
   :width: 7.08194in
   :height: 0.49167in
.. |image58| image:: _static/image55.png
   :width: 7.08194in
   :height: 1.33889in
.. |image59| image:: _static/image56.png
   :width: 4.34754in
   :height: 2.1875in
.. |image60| image:: _static/image57.png
   :width: 4.29804in
   :height: 2.20833in
.. |image61| image:: _static/image58.png
   :width: 4.27776in
   :height: 2.19792in
.. |image62| image:: _static/image59.png
   :width: 4.30671in
   :height: 2.20833in
.. |image63| image:: _static/image60.png
   :width: 4.27083in
   :height: 2.18994in
.. |image64| image:: _static/image61.png
   :width: 4.19792in
   :height: 2.14343in
.. |image65| image:: _static/image62.png
   :width: 4.26383in
   :height: 2.17708in
.. |image66| image:: _static/image63.png
   :width: 4.0625in
   :height: 2.08267in
.. |image67| image:: _static/image64.png
   :width: 6.66981in
   :height: 3.89737in
.. |image68| image:: _static/image65.png
   :width: 6.49272in
   :height: 4.03774in
.. |image69| image:: _static/image66.png
   :width: 3.82685in
   :height: 1.4434in
.. |image70| image:: _static/image67.png
   :width: 3.67811in
   :height: 3.76415in
.. |image71| image:: _static/image68.png
   :width: 7.1427in
   :height: 3.51042in
.. |image72| image:: _static/image69.png
   :width: 7.08194in
   :height: 2.97015in
.. |tn2| image:: _static/image70.jpeg
   :width: 5.46875in
   :height: 7.21875in
.. |image74| image:: _static/image71.png
   :width: 6.72316in
   :height: 3.0814in
.. |image75| image:: _static/image72.png
   :width: 6.69767in
   :height: 3.2917in
.. |enum4| image:: _static/image73.jpeg
   :width: 4.86458in
   :height: 4.55208in
.. |enum5| image:: _static/image74.jpeg
   :width: 4.10417in
   :height: 3.76042in
.. |enum6| image:: _static/image75.jpeg
   :width: 4.35417in
   :height: 4.03125in
.. |enum7| image:: _static/image76.jpeg
   :width: 3.59375in
   :height: 3.19792in
.. |enum8| image:: _static/image77.jpeg
   :width: 7.07292in
   :height: 0.63542in
.. |enum9| image:: _static/image78.jpeg
   :width: 3.22917in
   :height: 2.69792in
.. |enum10| image:: _static/image79.jpeg
   :width: 3.64583in
   :height: 3.44792in
.. |enum11| image:: _static/image80.jpeg
   :width: 7.07292in
   :height: 0.63542in
.. |dn1| image:: _static/image81.jpeg
   :width: 2.42708in
   :height: 3.375in
.. |image85| image:: _static/image82.png
   :width: 7.46063in
   :height: 3.66667in
.. |dn3| image:: _static/image83.jpeg
   :width: 4.68868in
   :height: 3.16981in
.. |image87| image:: _static/image84.png
   :width: 7.08194in
   :height: 5.33819in
.. |image88| image:: _static/image85.png
   :width: 3.49478in
   :height: 4.27083in
.. |image89| image:: _static/image86.png
   :width: 7.08194in
   :height: 3.77753in
.. |image90| image:: _static/image87.png
   :width: 7.08194in
   :height: 3.79444in
.. |image91| image:: _static/image88.png
   :width: 6.06174in
   :height: 6.63459in
.. |image92| image:: _static/image89.png
   :width: 5.28215in
   :height: 5.68868in
.. |image93| image:: _static/image90.png
   :width: 4.21267in
   :height: 2.59434in
.. |image94| image:: _static/image91.png
   :width: 5.28125in
   :height: 2.22917in
.. |image95| image:: _static/image92.png
   :width: 4.375in
   :height: 2.71875in
.. |node1| image:: _static/image93.png
   :width: 5.76042in
   :height: 2.04167in
.. |image97| image:: _static/image94.png
   :width: 3.66667in
   :height: 1.02083in
.. |image98| image:: _static/image95.png
   :width: 7.08194in
   :height: 1.01319in
.. |image99| image:: _static/image96.png
   :width: 6.13542in
   :height: 0.8125in
.. |negvaluedisp| image:: _static/image97.jpeg
   :width: 6.03125in
   :height: 2.80208in
.. |negvaluedisp1| image:: _static/image98.jpeg
   :width: 7.07292in
   :height: 2.60417in
.. |image102| image:: _static/image99.png
   :width: 5.97917in
   :height: 2.64583in
.. |defnode1| image:: _static/image100.jpeg
   :width: 4.27083in
   :height: 2.125in
.. |image104| image:: _static/image101.png
   :width: 5.625in
   :height: 2.5in
.. |defnode3| image:: _static/image102.jpeg
   :width: 7.08194in
   :height: 3.90556in
.. |image106| image:: _static/image103.png
   :width: 1.92708in
   :height: 2.89583in
.. |image107| image:: _static/image104.png
   :width: 1.78125in
   :height: 2.6875in
.. |image108| image:: _static/image105.png
   :width: 7.08194in
   :height: 6.33194in
.. |image109| image:: _static/image106.png
   :width: 7.08194in
   :height: 6.50903in
.. |image110| image:: _static/image107.png
   :width: 7.08194in
   :height: 6.59236in
.. |image111| image:: _static/image108.png
   :width: 1.83333in
   :height: 2.75in
.. |image112| image:: _static/image109.png
   :width: 6.71875in
   :height: 5.10417in
.. |image113| image:: _static/image110.png
   :width: 6.91667in
   :height: 3.94792in
.. |runtime1| image:: _static/image111.jpeg
   :width: 5.78125in
   :height: 3.03125in
.. |runtime2| image:: _static/image112.jpeg
   :width: 6.21875in
   :height: 4.5625in
.. |runtime3| image:: _static/image113.jpeg
   :width: 6.125in
   :height: 4.38542in
.. |runtime4| image:: _static/image114.jpeg
   :width: 7.07292in
   :height: 3.41667in
.. |image118| image:: _static/image115.png
   :width: 3.58223in
   :height: 3.85986in
.. |image119| image:: _static/image116.png
   :width: 6.97829in
   :height: 3.35375in
.. |image120| image:: _static/image117.png
   :width: 3.68112in
   :height: 4.00122in
.. |image121| image:: _static/image118.png
   :width: 6.78125in
   :height: 3.31748in
.. |image122| image:: _static/image119.png
   :width: 7.08194in
   :height: 3.44931in
.. |image123| image:: _static/image120.png
   :width: 2.86667in
   :height: 3.16667in
.. |image124| image:: _static/image121.png
   :width: 7.08194in
   :height: 3.40625in
.. |image125| image:: _static/image122.png
   :width: 7.08194in
   :height: 3.45972in
.. |image126| image:: _static/image123.png
   :width: 7.08194in
   :height: 3.4375in
.. |image127| image:: _static/image124.png
   :width: 3.11419in
   :height: 1.92684in
.. |image128| image:: _static/image125.png
   :width: 7.08194in
   :height: 1.72083in
.. |image129| image:: _static/image126.png
   :width: 5.76042in
   :height: 2.69889in
.. |image130| image:: _static/image127.png
   :width: 7.08194in
   :height: 3.40625in
.. |image131| image:: _static/image128.png
   :width: 7.08194in
   :height: 2.59583in
.. |image132| image:: _static/image129.png
   :width: 7.08194in
   :height: 3.40625in
.. |image133| image:: _static/image130.png
   :width: 7.36701in
   :height: 3.60417in
.. |image134| image:: _static/image131.png
   :width: 7.1741in
   :height: 4.27083in
.. |image135| image:: _static/image132.png
   :width: 2.30208in
   :height: 2.03125in
.. |image136| image:: _static/image133.png
   :width: 3.98958in
   :height: 3.88542in
.. |image137| image:: _static/image134.png
   :width: 7.08194in
   :height: 3.86389in
.. |image138| image:: _static/image135.png
   :width: 4.59375in
   :height: 1.85417in
.. |image139| image:: _static/image136.png
   :width: 2.5in
   :height: 3.3125in
.. |ex1| image:: _static/image137.png
   :width: 7.08194in
   :height: 2.60347in
.. |exdata| image:: _static/image138.png
   :width: 4.32292in
   :height: 2.16667in
.. |ex2| image:: _static/image139.png
   :width: 3.40625in
   :height: 3.9375in
.. |ex3| image:: _static/image140.png
   :width: 3.55208in
   :height: 3.65625in
.. |image144| image:: _static/image141.png
   :width: 3.34375in
   :height: 1.89583in
.. |image145| image:: _static/image142.png
   :width: 4.92708in
   :height: 2.57292in
.. |image146| image:: _static/image143.png
   :width: 3.54167in
   :height: 2.17708in
.. |image147| image:: _static/image144.png
   :width: 3.375in
   :height: 2.32292in
.. |image148| image:: _static/image145.png
   :width: 7.01042in
   :height: 2.55208in
.. |image149| image:: _static/image146.png
   :width: 3.03125in
   :height: 1.90625in
.. |image150| image:: _static/image147.png
   :width: 4.83333in
   :height: 4.38542in
.. |image151| image:: _static/image148.png
   :width: 3.57292in
   :height: 3.58333in
.. |image152| image:: _static/image149.png
   :width: 7.08194in
   :height: 3.82986in
.. |image153| image:: _static/image150.png
   :width: 6.82292in
   :height: 3.60417in
.. |image154| image:: _static/image151.png
   :width: 1.92708in
   :height: 1.83333in
.. |image155| image:: _static/image152.png
   :width: 4.3125in
   :height: 3.125in
.. |image156| image:: _static/image153.png
   :width: 3.70833in
   :height: 1.29167in
.. |image157| image:: _static/image154.png
   :width: 7.08194in
   :height: 4.18681in
.. |image158| image:: _static/image155.png
   :width: 7.08194in
   :height: 1.66597in
.. |2018-11-29_10-55-00| image:: _static/image156.jpeg
   :width: 4.85417in
   :height: 4.54167in
.. |image160| image:: _static/image157.png
   :width: 7.08194in
   :height: 3.40556in
.. |image161| image:: _static/image158.png
   :width: 7.08194in
   :height: 4.19375in
.. |image162| image:: _static/image159.png
   :width: 2.85381in
   :height: 2.18723in
.. |image163| image:: _static/image160.png
   :width: 7.08194in
   :height: 4.07279in
.. |image164| image:: _static/image161.png
   :width: 2.08333in
   :height: 2.28125in
.. |image165| image:: _static/image162.png
   :width: 7.08194in
   :height: 4.21111in
.. |image166| image:: _static/image163.png
   :width: 7.08194in
   :height: 4.21806in
.. |image167| image:: _static/image164.png
   :width: 5.29167in
   :height: 2.19792in
.. |image168| image:: _static/image165.png
   :width: 5.05208in
   :height: 3.90625in
.. |image169| image:: _static/image166.png
   :width: 5.48958in
   :height: 2.22917in
.. |image170| image:: _static/image164.png
   :width: 4.91667in
   :height: 2.04167in
.. |image171| image:: _static/image167.png
   :width: 5.42708in
   :height: 2.875in
.. |image172| image:: _static/image162.png
   :width: 6.41667in
   :height: 3.8125in
.. |image173| image:: _static/image163.png
   :width: 7.08194in
   :height: 4.22847in
.. |image174| image:: _static/image168.png
   :width: 5.35417in
   :height: 2.20833in
.. |image175| image:: _static/image169.png
   :width: 7.08194in
   :height: 1.92639in
.. |image176| image:: _static/image170.png
   :width: 5.71875in
   :height: 3.82292in
.. |image177| image:: _static/image166.png
   :width: 5.66667in
   :height: 2.30208in
.. |image178| image:: _static/image168.png
   :width: 5.35417in
   :height: 2.20833in
.. |image179| image:: _static/image169.png
   :width: 7.08194in
   :height: 1.92639in
.. |image180| image:: _static/image171.png
   :width: 5.9375in
   :height: 3.27083in
.. |image181| image:: _static/image172.png
   :width: 4.01042in
   :height: 2.80208in
.. |image182| image:: _static/image173.png
   :width: 7.08194in
   :height: 3.40556in
.. |image183| image:: _static/image174.png
   :width: 5.4375in
   :height: 3.375in
.. |image184| image:: _static/image175.png
   :width: 7.08194in
   :height: 3.40556in
.. |image185| image:: _static/image176.png
   :width: 2.11458in
   :height: 1.98958in
.. |initial view| image:: _static/image177.jpeg
   :width: 7.08194in
   :height: 4.13472in
.. |image187| image:: _static/image178.png
   :width: 7.08194in
   :height: 4.72847in
